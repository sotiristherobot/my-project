["^ ","~:output",["^ ","~:js","goog.provide('clojure.core.rrb_vector.nodes');\ngoog.require('cljs.core');\nclojure.core.rrb_vector.nodes.empty_node = cljs.core.PersistentVector.EMPTY_NODE;\nclojure.core.rrb_vector.nodes.clone = (function clojure$core$rrb_vector$nodes$clone(shift,node){\nreturn (new cljs.core.VectorNode(node.edit,cljs.core.aclone(node.arr)));\n});\nclojure.core.rrb_vector.nodes.regular_QMARK_ = (function clojure$core$rrb_vector$nodes$regular_QMARK_(node){\nreturn (!((node.arr.length === (33))));\n});\nclojure.core.rrb_vector.nodes.node_ranges = (function clojure$core$rrb_vector$nodes$node_ranges(node){\nreturn (node.arr[(32)]);\n});\nclojure.core.rrb_vector.nodes.last_range = (function clojure$core$rrb_vector$nodes$last_range(node){\nvar rngs = clojure.core.rrb_vector.nodes.node_ranges(node);\nvar i = ((rngs[(32)]) - (1));\nreturn (rngs[i]);\n});\nclojure.core.rrb_vector.nodes.regular_ranges = (function clojure$core$rrb_vector$nodes$regular_ranges(shift,cnt){\nvar step = ((1) << shift);\nvar rngs = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\nvar i = (0);\nvar r = step;\nwhile(true){\nif((r < cnt)){\n(rngs[i] = r);\n\nvar G__31700 = (i + (1));\nvar G__31701 = (r + step);\ni = G__31700;\nr = G__31701;\ncontinue;\n} else {\n(rngs[i] = cnt);\n\n(rngs[(32)] = (i + (1)));\n\nreturn rngs;\n}\nbreak;\n}\n});\nclojure.core.rrb_vector.nodes.overflow_QMARK_ = (function clojure$core$rrb_vector$nodes$overflow_QMARK_(root,shift,cnt){\nwhile(true){\nif(clojure.core.rrb_vector.nodes.regular_QMARK_(root)){\nreturn ((cnt >> (5)) > ((1) << shift));\n} else {\nvar rngs = clojure.core.rrb_vector.nodes.node_ranges(root);\nvar slc = (rngs[(32)]);\nif((slc === (32))){\nvar or__4185__auto__ = (shift === (5));\nif(or__4185__auto__){\nreturn or__4185__auto__;\n} else {\nvar G__31702 = (root.arr[(slc - (1))]);\nvar G__31703 = (shift - (5));\nvar G__31704 = (((rngs[(31)]) - (rngs[(30)])) + (32));\nroot = G__31702;\nshift = G__31703;\ncnt = G__31704;\ncontinue;\n}\n} else {\nreturn false;\n}\n}\nbreak;\n}\n});\nclojure.core.rrb_vector.nodes.index_of_0 = (function clojure$core$rrb_vector$nodes$index_of_0(arr){\nvar l = (0);\nvar h = (31);\nwhile(true){\nif((l >= (h - (1)))){\nif((((arr[l]) | (0)) === (0))){\nreturn l;\n} else {\nif((((arr[h]) | (0)) === (0))){\nreturn h;\n} else {\nreturn (32);\n}\n}\n} else {\nvar mid = (l + ((h - l) >> (1)));\nif((((arr[mid]) | (0)) === (0))){\nvar G__31705 = l;\nvar G__31706 = mid;\nl = G__31705;\nh = G__31706;\ncontinue;\n} else {\nvar G__31707 = (mid + (1));\nvar G__31708 = h;\nl = G__31707;\nh = G__31708;\ncontinue;\n}\n}\nbreak;\n}\n});\nclojure.core.rrb_vector.nodes.index_of_nil = (function clojure$core$rrb_vector$nodes$index_of_nil(arr){\nvar l = (0);\nvar h = (31);\nwhile(true){\nif((l >= (h - (1)))){\nif(((arr[l]) == null)){\nreturn l;\n} else {\nif(((arr[h]) == null)){\nreturn h;\n} else {\nreturn (32);\n}\n}\n} else {\nvar mid = (l + ((h - l) >> (1)));\nif(((arr[mid]) == null)){\nvar G__31709 = l;\nvar G__31710 = mid;\nl = G__31709;\nh = G__31710;\ncontinue;\n} else {\nvar G__31711 = (mid + (1));\nvar G__31712 = h;\nl = G__31711;\nh = G__31712;\ncontinue;\n}\n}\nbreak;\n}\n});\nclojure.core.rrb_vector.nodes.first_child = (function clojure$core$rrb_vector$nodes$first_child(node){\nreturn (node.arr[(0)]);\n});\nclojure.core.rrb_vector.nodes.last_child = (function clojure$core$rrb_vector$nodes$last_child(node){\nvar arr = node.arr;\nif(clojure.core.rrb_vector.nodes.regular_QMARK_(node)){\nreturn (arr[(clojure.core.rrb_vector.nodes.index_of_nil(arr) - (1))]);\n} else {\nreturn (arr[((clojure.core.rrb_vector.nodes.node_ranges(node)[(32)]) - (1))]);\n}\n});\nclojure.core.rrb_vector.nodes.remove_leftmost_child = (function clojure$core$rrb_vector$nodes$remove_leftmost_child(shift,parent){\nvar arr = parent.arr;\nif(((arr[(1)]) == null)){\nreturn null;\n} else {\nvar r_QMARK_ = clojure.core.rrb_vector.nodes.regular_QMARK_(parent);\nvar new_arr = (new Array(((r_QMARK_)?(32):(33))));\ncljs.core.array_copy(arr,(1),new_arr,(0),(31));\n\nif((!(r_QMARK_))){\nvar rngs_31713 = clojure.core.rrb_vector.nodes.node_ranges(parent);\nvar rng0_31714 = (rngs_31713[(0)]);\nvar new_rngs_31715 = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\nvar lim_31716 = (rngs_31713[(32)]);\ncljs.core.array_copy(rngs_31713,(1),new_rngs_31715,(0),(lim_31716 - (1)));\n\nvar i_31717 = (0);\nwhile(true){\nif((i_31717 < lim_31716)){\n(new_rngs_31715[i_31717] = ((new_rngs_31715[i_31717]) - rng0_31714));\n\nvar G__31718 = (i_31717 + (1));\ni_31717 = G__31718;\ncontinue;\n} else {\n}\nbreak;\n}\n\n(new_rngs_31715[(32)] = ((rngs_31713[(32)]) - (1)));\n\n(new_rngs_31715[((rngs_31713[(32)]) - (1))] = (0));\n\n(new_arr[(32)] = new_rngs_31715);\n} else {\n}\n\nreturn cljs.core.__GT_VectorNode(parent.edit,new_arr);\n}\n});\nclojure.core.rrb_vector.nodes.replace_leftmost_child = (function clojure$core$rrb_vector$nodes$replace_leftmost_child(shift,parent,pcnt,child,d){\nif(clojure.core.rrb_vector.nodes.regular_QMARK_(parent)){\nvar step = ((1) << shift);\nvar rng0 = (step - d);\nvar ncnt = (pcnt - d);\nvar li = ((shift >> (pcnt - (1))) & (31));\nvar arr = parent.arr;\nvar new_arr = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\nvar new_rngs = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\n(new_arr[(0)] = child);\n\ncljs.core.array_copy(arr,(1),new_arr,(1),li);\n\n(new_arr[(32)] = new_rngs);\n\n(new_rngs[(0)] = rng0);\n\n(new_rngs[li] = ncnt);\n\n(new_rngs[(32)] = (li + (1)));\n\nvar i_31719 = (1);\nwhile(true){\nif((i_31719 <= li)){\n(new_rngs[i_31719] = ((new_rngs[(i_31719 - (1))]) + step));\n\nvar G__31720 = (i_31719 + (1));\ni_31719 = G__31720;\ncontinue;\n} else {\n}\nbreak;\n}\n\nreturn cljs.core.__GT_VectorNode(null,new_arr);\n} else {\nvar new_arr = cljs.core.aclone(parent.arr);\nvar rngs = clojure.core.rrb_vector.nodes.node_ranges(parent);\nvar new_rngs = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\nvar li = ((rngs[(32)]) - (1));\n(new_rngs[(32)] = (rngs[(32)]));\n\n(new_arr[(32)] = new_rngs);\n\n(new_arr[(0)] = child);\n\nvar i_31721 = (0);\nwhile(true){\nif((i_31721 <= li)){\n(new_rngs[i_31721] = ((rngs[i_31721]) - d));\n\nvar G__31722 = (i_31721 + (1));\ni_31721 = G__31722;\ncontinue;\n} else {\n}\nbreak;\n}\n\nreturn cljs.core.__GT_VectorNode(null,new_arr);\n}\n});\nclojure.core.rrb_vector.nodes.replace_rightmost_child = (function clojure$core$rrb_vector$nodes$replace_rightmost_child(shift,parent,child,d){\nif(clojure.core.rrb_vector.nodes.regular_QMARK_(parent)){\nvar arr = parent.arr;\nvar i = (clojure.core.rrb_vector.nodes.index_of_nil(arr) - (1));\nif(clojure.core.rrb_vector.nodes.regular_QMARK_(child)){\nvar new_arr = cljs.core.aclone(arr);\n(new_arr[i] = child);\n\nreturn cljs.core.__GT_VectorNode(null,new_arr);\n} else {\nvar arr__$1 = parent.arr;\nvar new_arr = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\nvar step = ((1) << shift);\nvar rngs = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\n(rngs[(32)] = (i + (1)));\n\n(new_arr[(32)] = rngs);\n\ncljs.core.array_copy(arr__$1,(0),new_arr,(0),i);\n\n(new_arr[i] = child);\n\nvar j_31723 = (0);\nvar r_31724 = step;\nwhile(true){\nif((j_31723 <= i)){\n(rngs[j_31723] = r_31724);\n\nvar G__31725 = (j_31723 + (1));\nvar G__31726 = (r_31724 + step);\nj_31723 = G__31725;\nr_31724 = G__31726;\ncontinue;\n} else {\n}\nbreak;\n}\n\n(rngs[i] = clojure.core.rrb_vector.nodes.last_range(child));\n\nreturn cljs.core.__GT_VectorNode(null,new_arr);\n}\n} else {\nvar rngs = clojure.core.rrb_vector.nodes.node_ranges(parent);\nvar new_rngs = cljs.core.aclone(rngs);\nvar i = ((rngs[(32)]) - (1));\nvar new_arr = cljs.core.aclone(parent.arr);\n(new_arr[i] = child);\n\n(new_arr[(32)] = new_rngs);\n\n(new_rngs[i] = ((rngs[i]) + d));\n\nreturn cljs.core.__GT_VectorNode(null,new_arr);\n}\n});\nclojure.core.rrb_vector.nodes.new_path_STAR_ = (function clojure$core$rrb_vector$nodes$new_path_STAR_(shift,node){\nvar reg_QMARK_ = ((32) === node.arr.length);\nvar len = ((reg_QMARK_)?(32):(33));\nvar arr = (new Array(len));\nvar rngs = (((!(reg_QMARK_)))?(function (){var G__31695 = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\n(G__31695[(0)] = node.arr.length);\n\n(G__31695[(32)] = (1));\n\nreturn G__31695;\n})():null);\nvar ret = cljs.core.__GT_VectorNode(null,arr);\nvar arr_31732__$1 = arr;\nvar shift_31733__$1 = shift;\nwhile(true){\nif((shift_31733__$1 === (5))){\nif((!(reg_QMARK_))){\n(arr_31732__$1[(32)] = rngs);\n} else {\n}\n\n(arr_31732__$1[(0)] = node);\n} else {\nvar a_31734 = (new Array(len));\nvar e_31735 = cljs.core.__GT_VectorNode(null,a_31734);\n(arr_31732__$1[(0)] = e_31735);\n\nif((!(reg_QMARK_))){\n(arr_31732__$1[(32)] = rngs);\n} else {\n}\n\nvar G__31736 = a_31734;\nvar G__31737 = (shift_31733__$1 - (5));\narr_31732__$1 = G__31736;\nshift_31733__$1 = G__31737;\ncontinue;\n}\nbreak;\n}\n\nreturn ret;\n});\nclojure.core.rrb_vector.nodes.fold_tail = (function clojure$core$rrb_vector$nodes$fold_tail(node,shift,cnt,tail){\nvar tlen = tail.length;\nvar reg_QMARK_ = ((clojure.core.rrb_vector.nodes.regular_QMARK_(node)) && ((tlen === (32))));\nvar arr = node.arr;\nvar li = clojure.core.rrb_vector.nodes.index_of_nil(arr);\nvar new_arr = (new Array(((reg_QMARK_)?(32):(33))));\nvar rngs = (((!(clojure.core.rrb_vector.nodes.regular_QMARK_(node))))?clojure.core.rrb_vector.nodes.node_ranges(node):null);\nvar cret = (((shift === (5)))?cljs.core.__GT_VectorNode(null,tail):(function (){var G__31696 = (arr[(li - (1))]);\nvar G__31697 = (shift - (5));\nvar G__31698 = ((clojure.core.rrb_vector.nodes.regular_QMARK_(node))?cljs.core.mod(cnt,((1) << shift)):(function (){var li__$1 = ((rngs[(32)]) - (1));\nif((li__$1 > (0))){\nreturn ((rngs[li__$1]) - (rngs[(li__$1 - (1))]));\n} else {\nreturn (rngs[(0)]);\n}\n})());\nvar G__31699 = tail;\nreturn (clojure.core.rrb_vector.nodes.fold_tail.cljs$core$IFn$_invoke$arity$4 ? clojure.core.rrb_vector.nodes.fold_tail.cljs$core$IFn$_invoke$arity$4(G__31696,G__31697,G__31698,G__31699) : clojure.core.rrb_vector.nodes.fold_tail.call(null,G__31696,G__31697,G__31698,G__31699));\n})());\nvar new_rngs = (((!(reg_QMARK_)))?(cljs.core.truth_(rngs)?cljs.core.aclone(rngs):clojure.core.rrb_vector.nodes.regular_ranges(shift,cnt)):null);\nif((((((cret == null)) || ((shift === (5))))) && ((li === (32))))){\nreturn null;\n} else {\ncljs.core.array_copy(arr,(0),new_arr,(0),li);\n\nif(reg_QMARK_){\n} else {\nif((((cret == null)) || ((shift === (5))))){\n(new_rngs[li] = ((((li > (0)))?(new_rngs[(li - (1))]):((0) | (0))) + tlen));\n\n(new_rngs[(32)] = (li + (1)));\n} else {\nif((li > (0))){\n(new_rngs[(li - (1))] = ((new_rngs[(li - (1))]) + tlen));\n} else {\n}\n\n(new_rngs[(32)] = li);\n}\n}\n\nif((!(reg_QMARK_))){\n(new_arr[(32)] = new_rngs);\n} else {\n}\n\nif((cret == null)){\n(new_arr[li] = clojure.core.rrb_vector.nodes.new_path_STAR_((shift - (5)),cljs.core.__GT_VectorNode(null,tail)));\n} else {\n(new_arr[(((shift === (5)))?li:(li - (1)))] = cret);\n}\n\nreturn cljs.core.__GT_VectorNode(null,new_arr);\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/core/rrb_vector/nodes.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",34],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",["~$clone"]],"~:name","~$clojure.core.rrb-vector.nodes","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs.core","^P","~$goog","^Q"],"~:seen",["^H",[]],"~:uses",null,"~:require-macros",["^ ","^P","^P"],"~:form",["~#list",["~$ns","^K",["^V",["~:refer-clojure","~:exclude",["^I"]]]]],"~:flags",["^ "],"~:js-deps",["^ "],"~:deps",["^Q","^P"]],"^M","^K","~:resource-id",["~:shadow.build.classpath/resource","clojure/core/rrb_vector/nodes.cljs"],"~:compiled-at",1586645236648,"~:resource-name","clojure/core/rrb_vector/nodes.cljs","~:warnings",[],"~:source","(ns clojure.core.rrb-vector.nodes\n  (:refer-clojure :exclude [clone]))\n\n;;; node ops\n\n(def empty-node cljs.core.PersistentVector.EMPTY_NODE)\n\n(defn clone [shift node]\n  (VectorNode. (.-edit node) (aclone (.-arr node))))\n\n(defn regular? [node]\n  (not (== (alength (.-arr node)) 33)))\n\n;;; ranges\n\n(defn node-ranges [node]\n  (aget (.-arr node) 32))\n\n(defn last-range [node]\n  (let [rngs (node-ranges node)\n        i    (dec (aget rngs 32))]\n    (aget rngs i)))\n\n(defn regular-ranges [shift cnt]\n  (let [step (bit-shift-left 1 shift)\n        rngs (make-array 33)]\n    (loop [i 0 r step]\n      (if (< r cnt)\n        (do (aset rngs i r)\n            (recur (inc i) (+ r step)))\n        (do (aset rngs i cnt)\n            (aset rngs 32 (inc i))\n            rngs)))))\n\n;;; root overflow\n\n(defn overflow? [root shift cnt]\n  (if (regular? root)\n    (> (bit-shift-right cnt 5)\n       (bit-shift-left 1 shift))\n    (let [rngs (node-ranges root)\n          slc  (aget rngs 32)]\n      (and (== slc 32)\n           (or (== shift 5)\n               (recur (aget (.-arr root) (dec slc))\n                      (- shift 5)\n                      (+ (- (aget rngs 31) (aget rngs 30)) 32)))))))\n\n;;; find nil / 0\n\n(defn index-of-0 [arr]\n  (loop [l 0 h 31]\n    (if (>= l (dec h))\n      (if (zero? (int (aget arr l)))\n        l\n        (if (zero? (int (aget arr h)))\n          h\n          32))\n      (let [mid (+ l (bit-shift-right (- h l) 1))]\n        (if (zero? (int (aget arr mid)))\n          (recur l mid)\n          (recur (inc mid) h))))))\n\n(defn index-of-nil ^long [arr]\n  (loop [l 0 h 31]\n    (if (>= l (dec h))\n      (if (nil? (aget arr l))\n        l\n        (if (nil? (aget arr h))\n          h\n          32))\n      (let [mid (+ l (bit-shift-right (- h l) 1))]\n        (if (nil? (aget arr mid))\n          (recur l mid)\n          (recur (inc mid) h))))))\n\n;;; children\n\n(defn first-child [node]\n  (aget (.-arr node) 0))\n\n(defn last-child [node]\n  (let [arr (.-arr node)]\n    (if (regular? node)\n      (aget arr (dec (index-of-nil arr)))\n      (aget arr (dec (aget (node-ranges node) 32))))))\n\n(defn remove-leftmost-child [shift parent]\n  (let [arr (.-arr parent)]\n    (if (nil? (aget arr 1))\n      nil\n      (let [r?      (regular? parent)\n            new-arr (make-array (if r? 32 33))]\n        (array-copy arr 1 new-arr 0 31)\n        (if-not r?\n          (let [rngs     (node-ranges parent)\n                rng0     (aget rngs 0)\n                new-rngs (make-array 33)\n                lim      (aget rngs 32)]\n            (array-copy rngs 1 new-rngs 0 (dec lim))\n            (loop [i 0]\n              (when (< i lim)\n                (aset new-rngs i (- (aget new-rngs i) rng0))\n                (recur (inc i))))\n            (aset new-rngs 32 (dec (aget rngs 32)))\n            (aset new-rngs (dec (aget rngs 32)) 0)\n            (aset new-arr 32 new-rngs)))\n        (->VectorNode (.-edit parent) new-arr)))))\n\n(defn replace-leftmost-child [shift parent pcnt child d]\n  (if (regular? parent)\n    (let [step (bit-shift-left 1 shift)\n          rng0 (- step d)\n          ncnt (- pcnt d)\n          li   (bit-and (bit-shift-right shift (dec pcnt)) 0x1f)\n          arr      (.-arr parent)\n          new-arr  (make-array 33)\n          new-rngs (make-array 33)]\n      (aset new-arr 0 child)\n      (array-copy arr 1 new-arr 1 li)\n      (aset new-arr 32 new-rngs)\n      (aset new-rngs 0 rng0)\n      (aset new-rngs li ncnt)\n      (aset new-rngs 32 (inc li))\n      (loop [i 1]\n        (when (<= i li)\n          (aset new-rngs i (+ (aget new-rngs (dec i)) step))\n          (recur (inc i))))\n      (->VectorNode nil new-arr))\n    (let [new-arr  (aclone (.-arr parent))\n          rngs     (node-ranges parent)\n          new-rngs (make-array 33)\n          li       (dec (aget rngs 32))]\n      (aset new-rngs 32 (aget rngs 32))\n      (aset new-arr 32 new-rngs)\n      (aset new-arr 0 child)\n      (loop [i 0]\n        (when (<= i li)\n          (aset new-rngs i (- (aget rngs i) d))\n          (recur (inc i))))\n      (->VectorNode nil new-arr))))\n\n(defn replace-rightmost-child [shift parent child d]\n  (if (regular? parent)\n    (let [arr (.-arr parent)\n          i   (dec (index-of-nil arr))]\n      (if (regular? child)\n        (let [new-arr (aclone arr)]\n          (aset new-arr i child)\n          (->VectorNode nil new-arr))\n        (let [arr     (.-arr parent)\n              new-arr (make-array 33)\n              step    (bit-shift-left 1 shift)\n              rngs    (make-array 33)]\n          (aset rngs 32 (inc i))\n          (aset new-arr 32 rngs)\n          (array-copy arr 0 new-arr 0 i)\n          (aset new-arr i child)\n          (loop [j 0 r step]\n            (when (<= j i)\n              (aset rngs j r)\n              (recur (inc j) (+ r step))))\n          (aset rngs i (last-range child))\n          (->VectorNode nil new-arr))))\n    (let [rngs     (node-ranges parent)\n          new-rngs (aclone rngs)\n          i        (dec (aget rngs 32))\n          new-arr  (aclone (.-arr parent))]\n      (aset new-arr i child)\n      (aset new-arr 32 new-rngs)\n      (aset new-rngs i (+ (aget rngs i) d))\n      (->VectorNode nil new-arr))))\n\n;;; fold-tail\n\n(defn new-path* [shift node]\n  (let [reg? (== 32 (alength (.-arr node)))\n        len  (if reg? 32 33)\n        arr  (make-array len)\n        rngs (if-not reg?\n               (doto (make-array 33)\n                 (aset 0 (alength (.-arr node)))\n                 (aset 32 1)))\n        ret  (->VectorNode nil arr)]\n    (loop [arr arr shift shift]\n      (if (== shift 5)\n        (do (if-not reg?\n              (aset arr 32 rngs))\n            (aset arr 0 node))\n        (let [a (make-array len)\n              e (->VectorNode nil a)]\n          (aset arr 0 e)\n          (if-not reg?\n            (aset arr 32 rngs))\n          (recur a (- shift 5)))))\n    ret))\n\n(defn fold-tail [node shift cnt tail]\n  (let [tlen     (alength tail)\n        reg?     (and (regular? node) (== tlen 32))\n        arr      (.-arr node)\n        li       (index-of-nil arr)\n        new-arr  (make-array (if reg? 32 33))\n        rngs     (if-not (regular? node) (node-ranges node))\n        cret     (if (== shift 5)\n                   (->VectorNode nil tail)\n                   (fold-tail (aget arr (dec li))\n                              (- shift 5)\n                              (if (regular? node)\n                                (mod cnt (bit-shift-left 1 shift))\n                                (let [li (dec (aget rngs 32))]\n                                  (if (pos? li)\n                                    (- (aget rngs li) (aget rngs (dec li)))\n                                    (aget rngs 0))))\n                              tail))\n        new-rngs (if-not reg?\n                   (if rngs\n                     (aclone rngs)\n                     (regular-ranges shift cnt)))]\n    (when-not (and (or (nil? cret) (== shift 5)) (== li 32))\n      (array-copy arr 0 new-arr 0 li)\n      (when-not reg?\n        (if (or (nil? cret) (== shift 5))\n          (do (aset new-rngs li\n                    (+ (if (pos? li)\n                         (aget new-rngs (dec li))\n                         (int 0))\n                       tlen))\n              (aset new-rngs 32 (inc li)))\n          (do (when (pos? li)\n                (aset new-rngs (dec li)\n                      (+ (aget new-rngs (dec li)) tlen)))\n              (aset new-rngs 32 li))))\n      (if-not reg?\n        (aset new-arr 32 new-rngs))\n      (if (nil? cret)\n        (aset new-arr li (new-path* (- shift 5) (->VectorNode nil tail)))\n        (aset new-arr (if (== shift 5) li (dec li)) cret))\n      (->VectorNode nil new-arr))))\n","~:reader-features",["^H",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["clojure.core.rrb-vector.nodes/empty-node","cljs.core/PersistentVector","clojure.core.rrb-vector.nodes/clone","shift","node","cljs.core/VectorNode","cljs.core/aclone","clojure.core.rrb-vector.nodes/regular?","clojure.core.rrb-vector.nodes/node-ranges","clojure.core.rrb-vector.nodes/last-range","rngs","i","clojure.core.rrb-vector.nodes/regular-ranges","cnt","step","r","clojure.core.rrb-vector.nodes/overflow?","root","slc","or__4185__auto__","clojure.core.rrb-vector.nodes/index-of-0","arr","l","h","mid","clojure.core.rrb-vector.nodes/index-of-nil","clojure.core.rrb-vector.nodes/first-child","clojure.core.rrb-vector.nodes/last-child","clojure.core.rrb-vector.nodes/remove-leftmost-child","parent","r?","new-arr","js/Array","cljs.core/array-copy","rng0","new-rngs","lim","cljs.core/->VectorNode","clojure.core.rrb-vector.nodes/replace-leftmost-child","pcnt","child","d","ncnt","li","clojure.core.rrb-vector.nodes/replace-rightmost-child","j","clojure.core.rrb-vector.nodes/new-path*","reg?","len","G__31695","ret","a","e","clojure.core.rrb-vector.nodes/fold-tail","tail","tlen","cret","G__31696","G__31697","G__31698","G__31699","cljs.core/mod"]],"~:used-vars",["^H",["~$clojure.core.rrb-vector.nodes/empty-node","~$clojure.core.rrb-vector.nodes/overflow?","~$clojure.core.rrb-vector.nodes/index-of-0","~$cljs.core/VectorNode","~$cljs.core/aclone","~$clojure.core.rrb-vector.nodes/replace-rightmost-child","~$clojure.core.rrb-vector.nodes/last-range","~$clojure.core.rrb-vector.nodes/replace-leftmost-child","~$cljs.core/PersistentVector","~$clojure.core.rrb-vector.nodes/new-path*","~$clojure.core.rrb-vector.nodes/clone","~$clojure.core.rrb-vector.nodes/remove-leftmost-child","~$clojure.core.rrb-vector.nodes/last-child","~$clojure.core.rrb-vector.nodes/regular?","~$clojure.core.rrb-vector.nodes/first-child","~$cljs.core/->VectorNode","~$clojure.core.rrb-vector.nodes/fold-tail","~$cljs.core/not","~$clojure.core.rrb-vector.nodes/regular-ranges","~$clojure.core.rrb-vector.nodes/index-of-nil","~$cljs.core/array-copy","~$clojure.core.rrb-vector.nodes/node-ranges"]]],"~:cache-keys",["~#cmap",[["^12","goog/dom/tagname.js"],[1586644092443,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^H",[]],"~:deps-syms",["^Q","~$goog.dom.HtmlElement"]]],["^12","goog/math/math.js"],[1586644092443,"^1V",["^ ","^1W",null,"^1X",["^H",[]],"^1Y",["^Q","~$goog.array","~$goog.asserts"]]],["^12","goog/html/trustedtypes.js"],[1586644092443,"^1V",["^ ","^1W",null,"^1X",["^H",[]],"^1Y",["^Q"]]],["^12","goog/labs/useragent/browser.js"],[1586644092443,"^1V",["^ ","^1W",null,"^1X",["^H",[]],"^1Y",["^Q","^1[","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^12","goog/html/safeurl.js"],[1586644092443,"^1V",["^ ","^1W",null,"^1X",["^H",[]],"^1Y",["^Q","^20","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^23"]]],["^12","goog/array/array.js"],[1586644092443,"^1V",["^ ","^1W",null,"^1X",["^H",[]],"^1Y",["^Q","^20"]]],["^12","goog/debug/error.js"],[1586644092443,"^1V",["^ ","^1W",null,"^1X",["^H",[]],"^1Y",["^Q"]]],["^12","clojure/core/rrb_vector/nodes.cljs"],[1585781239859,"^1V",["^ ","^1W",null,"^1X",["^H",[]],"^1Y",["^Q","^P"]]],["^12","goog/dom/nodetype.js"],[1586644092443,"^1V",["^ ","^1W",null,"^1X",["^H",[]],"^1Y",["^Q"]]],["^12","goog/string/typedstring.js"],[1586644092443,"^1V",["^ ","^1W",null,"^1X",["^H",[]],"^1Y",["^Q"]]],["^12","goog/object/object.js"],[1586644092443,"^1V",["^ ","^1W",null,"^1X",["^H",[]],"^1Y",["^Q"]]],["^12","goog/dom/asserts.js"],[1586644092443,"^1V",["^ ","^1W",null,"^1X",["^H",[]],"^1Y",["^Q","^20"]]],"~:SHADOW-TIMESTAMP",[1586644100000,1586644100000,1585781238000],["^12","goog/math/long.js"],[1586644092443,"^1V",["^ ","^1W",null,"^1X",["^H",[]],"^1Y",["^Q","^20","~$goog.reflect"]]],["^12","goog/html/trustedresourceurl.js"],[1586644092443,"^1V",["^ ","^1W",null,"^1X",["^H",[]],"^1Y",["^Q","^20","~$goog.html.trustedtypes","^26","^27","^28","^29"]]],["^12","goog/string/internal.js"],[1586644092443,"^1V",["^ ","^1W",null,"^1X",["^H",[]],"^1Y",["^Q"]]],["^12","goog/functions/functions.js"],[1586644092443,"^1V",["^ ","^1W",null,"^1X",["^H",[]],"^1Y",["^Q"]]],["^12","goog/html/safestyle.js"],[1586644092443,"^1V",["^ ","^1W",null,"^1X",["^H",[]],"^1Y",["^Q","^1[","^20","~$goog.html.SafeUrl","^28","^29","^23"]]],["^12","goog/dom/safe.js"],[1586644092443,"^1V",["^ ","^1W",null,"^1X",["^H",[]],"^1Y",["^Q","^20","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^2=","^25","~$goog.html.uncheckedconversions","^28","^23"]]],["^12","goog/structs/map.js"],[1586644092443,"^1V",["^ ","^1W",null,"^1X",["^H",[]],"^1Y",["^Q","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^12","goog/html/safehtml.js"],[1586644092443,"^1V",["^ ","^1W",null,"^1X",["^H",[]],"^1Y",["^Q","^1[","^20","~$goog.dom.TagName","~$goog.dom.tags","^2A","^2B","~$goog.html.SafeStyleSheet","^2=","^25","^2<","^26","^27","~$goog.labs.userAgent.browser","^22","^28","^29","^23"]]],["^12","goog/dom/tags.js"],[1586644092443,"^1V",["^ ","^1W",null,"^1X",["^H",[]],"^1Y",["^Q","^22"]]],["^12","goog/asserts/asserts.js"],[1586644092443,"^1V",["^ ","^1W",null,"^1X",["^H",[]],"^1Y",["^Q","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^12","goog/uri/uri.js"],[1586644092443,"^1V",["^ ","^1W",null,"^1X",["^H",[]],"^1Y",["^Q","^1[","^20","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^12","goog/i18n/bidi.js"],[1586644092443,"^1V",["^ ","^1W",null,"^1X",["^H",[]],"^1Y",["^Q"]]],["^12","goog/fs/url.js"],[1586644092443,"^1V",["^ ","^1W",null,"^1X",["^H",[]],"^1Y",["^Q"]]],["^12","goog/base.js"],[1586644092443,"^1V",["^ ","^1W",null,"^1X",["^H",[]],"^1Y",[]]],["^12","goog/structs/structs.js"],[1586644092443,"^1V",["^ ","^1W",null,"^1X",["^H",[]],"^1Y",["^Q","^1[","^22"]]],["^12","goog/string/string.js"],[1586644092443,"^1V",["^ ","^1W",null,"^1X",["^H",[]],"^1Y",["^Q","~$goog.dom.safe","^2C","^28","^23"]]],["^12","goog/reflect/reflect.js"],[1586644092443,"^1V",["^ ","^1W",null,"^1X",["^H",[]],"^1Y",["^Q"]]],["^12","goog/labs/useragent/util.js"],[1586644092443,"^1V",["^ ","^1W",null,"^1X",["^H",[]],"^1Y",["^Q","^23"]]],["^12","goog/string/stringbuffer.js"],[1586644092443,"^1V",["^ ","^1W",null,"^1X",["^H",[]],"^1Y",["^Q"]]],["^12","goog/iter/iter.js"],[1586644092443,"^1V",["^ ","^1W",null,"^1X",["^H",[]],"^1Y",["^Q","^1[","^20","^2?","~$goog.math"]]],["^12","goog/html/uncheckedconversions.js"],[1586644092443,"^1V",["^ ","^1W",null,"^1X",["^H",[]],"^1Y",["^Q","^20","^2@","^2A","^2B","^2H","^2=","^25","^28","^23"]]],["^12","goog/dom/htmlelement.js"],[1586644092443,"^1V",["^ ","^1W",null,"^1X",["^H",[]],"^1Y",["^Q"]]],["^12","cljs/core.cljs"],[1585781238779,"^1V",["^ ","^1W",null,"^1X",["^H",[]],"^1Y",["^Q","~$goog.math.Long","~$goog.math.Integer","^2L","^22","^1[","~$goog.Uri","~$goog.string.StringBuffer"]]],["^12","goog/html/safescript.js"],[1586644092443,"^1V",["^ ","^1W",null,"^1X",["^H",[]],"^1Y",["^Q","^20","^2<","^28","^29"]]],["^12","goog/html/safestylesheet.js"],[1586644092443,"^1V",["^ ","^1W",null,"^1X",["^H",[]],"^1Y",["^Q","^1[","^20","^2B","^22","^28","^29","^23"]]],["^12","goog/math/integer.js"],[1586644092443,"^1V",["^ ","^1W",null,"^1X",["^H",[]],"^1Y",["^Q","^2;"]]],["^12","goog/uri/utils.js"],[1586644092443,"^1V",["^ ","^1W",null,"^1X",["^H",[]],"^1Y",["^Q","^1[","^20","^2L"]]],["^12","goog/string/const.js"],[1586644092443,"^1V",["^ ","^1W",null,"^1X",["^H",[]],"^1Y",["^Q","^20","^29"]]]]],"~:clj-info",["^ ","jar:file:/Users/sotiris/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1585781237000,"jar:file:/Users/sotiris/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1585781237000,"jar:file:/Users/sotiris/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map/base64_vlq.clj",1585781238000,"jar:file:/Users/sotiris/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/js_deps.cljc",1585781238000,"jar:file:/Users/sotiris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1581178465000,"jar:file:/Users/sotiris/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map.clj",1585781238000,"jar:file:/Users/sotiris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1581178465000,"jar:file:/Users/sotiris/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/tagged_literals.cljc",1585781238000,"jar:file:/Users/sotiris/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1585781237000,"jar:file:/Users/sotiris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1581178465000,"jar:file:/Users/sotiris/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/env.cljc",1585781238000,"jar:file:/Users/sotiris/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/externs.clj",1585781238000,"jar:file:/Users/sotiris/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/analyzer.cljc",1585781238000,"jar:file:/Users/sotiris/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/compiler.cljc",1585781238000,"jar:file:/Users/sotiris/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/util.cljc",1585781238000,"jar:file:/Users/sotiris/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1584832190000,"jar:file:/Users/sotiris/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1585781237000,"jar:file:/Users/sotiris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1581178465000,"jar:file:/Users/sotiris/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map/base64.clj",1585781238000,"jar:file:/Users/sotiris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1581178465000,"jar:file:/Users/sotiris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1581178465000,"jar:file:/Users/sotiris/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/core.cljc",1585781238000,"jar:file:/Users/sotiris/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1585781237000,"jar:file:/Users/sotiris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1581178465000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","clojure/core/rrb_vector/nodes.cljs","^7",1,"^8",5,"^9",1,"^:",34],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E"],"^F",null,"^G",["^H",["^I"]],"^J","^K","^N",null,"^O",["^ ","^P","^P","^Q","^Q"],"^R",["^H",[]],"~:shadow/js-access-global",["^H",["Array"]],"^S",null,"~:defs",["^ ","~$regular?",["^ ","~:protocol-inline",null,"^5",["^ ","^6","clojure/core/rrb_vector/nodes.cljs","^7",11,"^8",7,"^9",11,"^:",15,"~:arglists",["^V",["~$quote",["^V",[["~$node"]]]]]],"^J","^1K","^6","clojure/core/rrb_vector/nodes.cljs","^:",15,"~:method-params",["^V",[["^3L"]]],"~:protocol-impl",null,"~:arglists-meta",["^V",[null,null]],"^8",1,"~:variadic?",false,"^7",11,"~:ret-tag","~$boolean","^9",11,"~:max-fixed-arity",1,"~:fn-var",true,"^3J",["^V",["^3K",["^V",[["^3L"]]]]]],"~$remove-leftmost-child",["^ ","^3I",null,"^5",["^ ","^6","clojure/core/rrb_vector/nodes.cljs","^7",88,"^8",7,"^9",88,"^:",28,"^3J",["^V",["^3K",["^V",[["~$shift","~$parent"]]]]]],"^J","^1I","^6","clojure/core/rrb_vector/nodes.cljs","^:",28,"^3M",["^V",[["^3V","^3W"]]],"^3N",null,"^3O",["^V",[null,null]],"^8",1,"^3P",false,"^7",88,"^3Q",["^H",["^1A","~$clj-nil"]],"^9",88,"^3S",2,"^3T",true,"^3J",["^V",["^3K",["^V",[["^3V","^3W"]]]]]],"~$last-range",["^ ","^3I",null,"^5",["^ ","^6","clojure/core/rrb_vector/nodes.cljs","^7",19,"^8",7,"^9",19,"^:",17,"^3J",["^V",["^3K",["^V",[["^3L"]]]]]],"^J","^1D","^6","clojure/core/rrb_vector/nodes.cljs","^:",17,"^3M",["^V",[["^3L"]]],"^3N",null,"^3O",["^V",[null,null]],"^8",1,"^3P",false,"^7",19,"^3Q","~$any","^9",19,"^3S",1,"^3T",true,"^3J",["^V",["^3K",["^V",[["^3L"]]]]]],"~$node-ranges",["^ ","^3I",null,"^5",["^ ","^6","clojure/core/rrb_vector/nodes.cljs","^7",16,"^8",7,"^9",16,"^:",18,"^3J",["^V",["^3K",["^V",[["^3L"]]]]]],"^J","^1S","^6","clojure/core/rrb_vector/nodes.cljs","^:",18,"^3M",["^V",[["^3L"]]],"^3N",null,"^3O",["^V",[null,null]],"^8",1,"^3P",false,"^7",16,"^3Q","^3Z","^9",16,"^3S",1,"^3T",true,"^3J",["^V",["^3K",["^V",[["^3L"]]]]]],"~$first-child",["^ ","^3I",null,"^5",["^ ","^6","clojure/core/rrb_vector/nodes.cljs","^7",79,"^8",7,"^9",79,"^:",18,"^3J",["^V",["^3K",["^V",[["^3L"]]]]]],"^J","^1L","^6","clojure/core/rrb_vector/nodes.cljs","^:",18,"^3M",["^V",[["^3L"]]],"^3N",null,"^3O",["^V",[null,null]],"^8",1,"^3P",false,"^7",79,"^3Q","^3Z","^9",79,"^3S",1,"^3T",true,"^3J",["^V",["^3K",["^V",[["^3L"]]]]]],"~$new-path*",["^ ","^3I",null,"^5",["^ ","^6","clojure/core/rrb_vector/nodes.cljs","^7",176,"^8",7,"^9",176,"^:",16,"^3J",["^V",["^3K",["^V",[["^3V","^3L"]]]]]],"^J","^1G","^6","clojure/core/rrb_vector/nodes.cljs","^:",16,"^3M",["^V",[["^3V","^3L"]]],"^3N",null,"^3O",["^V",[null,null]],"^8",1,"^3P",false,"^7",176,"^3Q","^1A","^9",176,"^3S",2,"^3T",true,"^3J",["^V",["^3K",["^V",[["^3V","^3L"]]]]]],"~$regular-ranges",["^ ","^3I",null,"^5",["^ ","^6","clojure/core/rrb_vector/nodes.cljs","^7",24,"^8",7,"^9",24,"^:",21,"^3J",["^V",["^3K",["^V",[["^3V","~$cnt"]]]]]],"^J","^1P","^6","clojure/core/rrb_vector/nodes.cljs","^:",21,"^3M",["^V",[["^3V","^43"]]],"^3N",null,"^3O",["^V",[null,null]],"^8",1,"^3P",false,"^7",24,"^3Q","~$array","^9",24,"^3S",2,"^3T",true,"^3J",["^V",["^3K",["^V",[["^3V","^43"]]]]]],"~$fold-tail",["^ ","^3I",null,"^5",["^ ","^6","clojure/core/rrb_vector/nodes.cljs","^7",198,"^8",7,"^9",198,"^:",16,"^3J",["^V",["^3K",["^V",[["^3L","^3V","^43","~$tail"]]]]]],"^J","^1N","^6","clojure/core/rrb_vector/nodes.cljs","^:",16,"^3M",["^V",[["^3L","^3V","^43","^46"]]],"^3N",null,"^3O",["^V",[null,null]],"^8",1,"^3P",false,"^7",198,"^3Q",["^H",["^1A","^3X"]],"^9",198,"^3S",4,"^3T",true,"^3J",["^V",["^3K",["^V",[["^3L","^3V","^43","^46"]]]]]],"~$index-of-nil",["^ ","^3I",null,"^5",["^ ","^6","clojure/core/rrb_vector/nodes.cljs","^7",64,"^8",7,"^9",64,"^:",19,"^3J",["^V",["^3K",["^V",[["~$arr"]]]]]],"^J","^1Q","^6","clojure/core/rrb_vector/nodes.cljs","^:",19,"^3M",["^V",[["^48"]]],"^3N",null,"^3O",["^V",[null,null]],"^8",1,"^3P",false,"^7",64,"^3Q",["^H",["^3Z","~$number"]],"^9",64,"^3S",1,"^3T",true,"^3J",["^V",["^3K",["^V",[["^48"]]]]]],"~$overflow?",["^ ","^3I",null,"^5",["^ ","^6","clojure/core/rrb_vector/nodes.cljs","^7",37,"^8",7,"^9",37,"^:",16,"^3J",["^V",["^3K",["^V",[["~$root","^3V","^43"]]]]]],"^J","^1?","^6","clojure/core/rrb_vector/nodes.cljs","^:",16,"^3M",["^V",[["^4;","^3V","^43"]]],"^3N",null,"^3O",["^V",[null,null]],"^8",1,"^3P",false,"^7",37,"^3Q","^3R","^9",37,"^3S",3,"^3T",true,"^3J",["^V",["^3K",["^V",[["^4;","^3V","^43"]]]]]],"~$empty-node",["^ ","^J","^1>","^6","clojure/core/rrb_vector/nodes.cljs","^7",6,"^8",1,"^9",6,"^:",16,"^5",["^ ","^6","clojure/core/rrb_vector/nodes.cljs","^7",6,"^8",6,"^9",6,"^:",16],"~:tag","^3Z"],"~$replace-leftmost-child",["^ ","^3I",null,"^5",["^ ","^6","clojure/core/rrb_vector/nodes.cljs","^7",110,"^8",7,"^9",110,"^:",29,"^3J",["^V",["^3K",["^V",[["^3V","^3W","~$pcnt","~$child","~$d"]]]]]],"^J","^1E","^6","clojure/core/rrb_vector/nodes.cljs","^:",29,"^3M",["^V",[["^3V","^3W","^4?","^4@","~$d"]]],"^3N",null,"^3O",["^V",[null,null]],"^8",1,"^3P",false,"^7",110,"^3Q","^1A","^9",110,"^3S",5,"^3T",true,"^3J",["^V",["^3K",["^V",[["^3V","^3W","^4?","^4@","~$d"]]]]]],"^I",["^ ","^3I",null,"^5",["^ ","^6","clojure/core/rrb_vector/nodes.cljs","^7",8,"^8",7,"^9",8,"^:",12,"^3J",["^V",["^3K",["^V",[["^3V","^3L"]]]]]],"^J","^1H","^6","clojure/core/rrb_vector/nodes.cljs","^:",12,"^3M",["^V",[["^3V","^3L"]]],"^3N",null,"^3O",["^V",[null,null]],"^8",1,"^3P",false,"^7",8,"^3Q","^1A","^9",8,"^3S",2,"^3T",true,"^3J",["^V",["^3K",["^V",[["^3V","^3L"]]]]]],"~$last-child",["^ ","^3I",null,"^5",["^ ","^6","clojure/core/rrb_vector/nodes.cljs","^7",82,"^8",7,"^9",82,"^:",17,"^3J",["^V",["^3K",["^V",[["^3L"]]]]]],"^J","^1J","^6","clojure/core/rrb_vector/nodes.cljs","^:",17,"^3M",["^V",[["^3L"]]],"^3N",null,"^3O",["^V",[null,null]],"^8",1,"^3P",false,"^7",82,"^3Q","^3Z","^9",82,"^3S",1,"^3T",true,"^3J",["^V",["^3K",["^V",[["^3L"]]]]]],"~$index-of-0",["^ ","^3I",null,"^5",["^ ","^6","clojure/core/rrb_vector/nodes.cljs","^7",51,"^8",7,"^9",51,"^:",17,"^3J",["^V",["^3K",["^V",[["^48"]]]]]],"^J","^1@","^6","clojure/core/rrb_vector/nodes.cljs","^:",17,"^3M",["^V",[["^48"]]],"^3N",null,"^3O",["^V",[null,null]],"^8",1,"^3P",false,"^7",51,"^3Q",["^H",["^3Z","^49"]],"^9",51,"^3S",1,"^3T",true,"^3J",["^V",["^3K",["^V",[["^48"]]]]]],"~$replace-rightmost-child",["^ ","^3I",null,"^5",["^ ","^6","clojure/core/rrb_vector/nodes.cljs","^7",143,"^8",7,"^9",143,"^:",30,"^3J",["^V",["^3K",["^V",[["^3V","^3W","^4@","~$d"]]]]]],"^J","^1C","^6","clojure/core/rrb_vector/nodes.cljs","^:",30,"^3M",["^V",[["^3V","^3W","^4@","~$d"]]],"^3N",null,"^3O",["^V",[null,null]],"^8",1,"^3P",false,"^7",143,"^3Q","^1A","^9",143,"^3S",4,"^3T",true,"^3J",["^V",["^3K",["^V",[["^3V","^3W","^4@","~$d"]]]]]]],"^T",["^ ","^P","^P"],"^Z",["^ "],"^[",["^ "],"^10",["^Q","^P"]],"^M","^K","~:ns-specs",["^ "],"~:ns-spec-vars",["^H",[]],"~:compiler-options",["^1U",[["^4F","~:static-fns"],true,["^4F","~:shadow-tweaks"],null,["^4F","~:source-map-inline"],null,["^4F","~:elide-asserts"],false,["^4F","~:optimize-constants"],null,["^4F","^15"],null,["^4F","~:external-config"],null,["^4F","~:tooling-config"],null,["^4F","~:emit-constants"],null,["^4F","~:load-tests"],null,["^4F","~:form-size-threshold"],null,["^4F","~:infer-externs"],true,["^4F","^17"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^4F","~:fn-invoke-direct"],null,["^4F","~:source-map"],"/dev/null"]]]