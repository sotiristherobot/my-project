["^ ","~:output",["^ ","~:js","goog.provide('fipp.engine');\ngoog.require('cljs.core');\ngoog.require('clojure.string');\ngoog.require('fipp.deque');\nif((typeof fipp !== 'undefined') && (typeof fipp.engine !== 'undefined') && (typeof fipp.engine.serialize_node !== 'undefined')){\n} else {\nfipp.engine.serialize_node = (function (){var method_table__4672__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar prefer_table__4673__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar method_cache__4674__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar cached_hierarchy__4675__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar hierarchy__4676__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),(function (){var fexpr__32035 = cljs.core.get_global_hierarchy;\nreturn (fexpr__32035.cljs$core$IFn$_invoke$arity$0 ? fexpr__32035.cljs$core$IFn$_invoke$arity$0() : fexpr__32035.call(null));\n})());\nreturn (new cljs.core.MultiFn(cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(\"fipp.engine\",\"serialize-node\"),cljs.core.first,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),hierarchy__4676__auto__,method_table__4672__auto__,prefer_table__4673__auto__,method_cache__4674__auto__,cached_hierarchy__4675__auto__));\n})();\n}\nfipp.engine.serialize = (function fipp$engine$serialize(doc){\nif((doc == null)){\nreturn null;\n} else {\nif(cljs.core.seq_QMARK_(doc)){\nreturn cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(fipp.engine.serialize,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([doc], 0));\n} else {\nif(typeof doc === 'string'){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"text\",\"text\",-1790561697),new cljs.core.Keyword(null,\"text\",\"text\",-1790561697),doc], null)], null);\n} else {\nif((doc instanceof cljs.core.Keyword)){\nreturn fipp.engine.serialize_node.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [doc], null));\n} else {\nif(cljs.core.vector_QMARK_(doc)){\nreturn fipp.engine.serialize_node.cljs$core$IFn$_invoke$arity$1(doc);\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Unexpected class for doc node\",new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"node\",\"node\",581201198),doc], null));\n\n}\n}\n}\n}\n}\n});\nfipp.engine.serialize_node.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"text\",\"text\",-1790561697),(function (p__32036){\nvar vec__32037 = p__32036;\nvar seq__32038 = cljs.core.seq(vec__32037);\nvar first__32039 = cljs.core.first(seq__32038);\nvar seq__32038__$1 = cljs.core.next(seq__32038);\nvar _ = first__32039;\nvar text = seq__32038__$1;\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"text\",\"text\",-1790561697),new cljs.core.Keyword(null,\"text\",\"text\",-1790561697),cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,text)], null)], null);\n}));\nfipp.engine.serialize_node.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"pass\",\"pass\",1574159993),(function (p__32040){\nvar vec__32041 = p__32040;\nvar seq__32042 = cljs.core.seq(vec__32041);\nvar first__32043 = cljs.core.first(seq__32042);\nvar seq__32042__$1 = cljs.core.next(seq__32042);\nvar _ = first__32043;\nvar text = seq__32042__$1;\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"pass\",\"pass\",1574159993),new cljs.core.Keyword(null,\"text\",\"text\",-1790561697),cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,text)], null)], null);\n}));\nfipp.engine.serialize_node.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"escaped\",\"escaped\",-1007929769),(function (p__32051){\nvar vec__32052 = p__32051;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32052,(0),null);\nvar text = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32052,(1),null);\nif(typeof text === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? text)\"));\n}\n\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"escaped\",\"escaped\",-1007929769),new cljs.core.Keyword(null,\"text\",\"text\",-1790561697),text], null)], null);\n}));\nfipp.engine.serialize_node.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"span\",\"span\",1394872991),(function (p__32059){\nvar vec__32064 = p__32059;\nvar seq__32065 = cljs.core.seq(vec__32064);\nvar first__32066 = cljs.core.first(seq__32065);\nvar seq__32065__$1 = cljs.core.next(seq__32065);\nvar _ = first__32066;\nvar children = seq__32065__$1;\nreturn fipp.engine.serialize(children);\n}));\nfipp.engine.serialize_node.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"line\",\"line\",212345235),(function (p__32070){\nvar vec__32071 = p__32070;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32071,(0),null);\nvar inline = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32071,(1),null);\nvar terminate = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32071,(2),null);\nvar inline__$1 = (function (){var or__4185__auto__ = inline;\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn \" \";\n}\n})();\nvar terminate__$1 = (function (){var or__4185__auto__ = terminate;\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn \"\";\n}\n})();\nif(typeof inline__$1 === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? inline)\"));\n}\n\nif(typeof terminate__$1 === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? terminate)\"));\n}\n\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"inline\",\"inline\",1399884222),inline__$1,new cljs.core.Keyword(null,\"terminate\",\"terminate\",1256003496),terminate__$1], null)], null);\n}));\nfipp.engine.serialize_node.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"break\",\"break\",126570225),(function() { \nvar G__32168__delegate = function (_){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"break\",\"break\",126570225)], null)], null);\n};\nvar G__32168 = function (var_args){\nvar _ = null;\nif (arguments.length > 0) {\nvar G__32169__i = 0, G__32169__a = new Array(arguments.length -  0);\nwhile (G__32169__i < G__32169__a.length) {G__32169__a[G__32169__i] = arguments[G__32169__i + 0]; ++G__32169__i;}\n  _ = new cljs.core.IndexedSeq(G__32169__a,0,null);\n} \nreturn G__32168__delegate.call(this,_);};\nG__32168.cljs$lang$maxFixedArity = 0;\nG__32168.cljs$lang$applyTo = (function (arglist__32170){\nvar _ = cljs.core.seq(arglist__32170);\nreturn G__32168__delegate(_);\n});\nG__32168.cljs$core$IFn$_invoke$arity$variadic = G__32168__delegate;\nreturn G__32168;\n})()\n);\nfipp.engine.serialize_node.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"group\",\"group\",582596132),(function (p__32078){\nvar vec__32080 = p__32078;\nvar seq__32081 = cljs.core.seq(vec__32080);\nvar first__32082 = cljs.core.first(seq__32081);\nvar seq__32081__$1 = cljs.core.next(seq__32081);\nvar _ = first__32082;\nvar children = seq__32081__$1;\nreturn cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"begin\",\"begin\",-319034319)], null)], null),fipp.engine.serialize(children),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"end\",\"end\",-268185958)], null)], null)], 0));\n}));\nfipp.engine.serialize_node.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"nest\",\"nest\",-314993663),(function (p__32087){\nvar vec__32088 = p__32087;\nvar seq__32089 = cljs.core.seq(vec__32088);\nvar first__32090 = cljs.core.first(seq__32089);\nvar seq__32089__$1 = cljs.core.next(seq__32089);\nvar _ = first__32090;\nvar args = seq__32089__$1;\nvar vec__32099 = ((typeof cljs.core.first(args) === 'number')?args:cljs.core.cons((2),args));\nvar seq__32100 = cljs.core.seq(vec__32099);\nvar first__32101 = cljs.core.first(seq__32100);\nvar seq__32100__$1 = cljs.core.next(seq__32100);\nvar offset = first__32101;\nvar children = seq__32100__$1;\nreturn cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"nest\",\"nest\",-314993663),new cljs.core.Keyword(null,\"offset\",\"offset\",296498311),offset], null)], null),fipp.engine.serialize(children),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"outdent\",\"outdent\",467209411)], null)], null)], 0));\n}));\nfipp.engine.serialize_node.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"align\",\"align\",1964212802),(function (p__32108){\nvar vec__32109 = p__32108;\nvar seq__32110 = cljs.core.seq(vec__32109);\nvar first__32111 = cljs.core.first(seq__32110);\nvar seq__32110__$1 = cljs.core.next(seq__32110);\nvar _ = first__32111;\nvar args = seq__32110__$1;\nvar vec__32112 = ((typeof cljs.core.first(args) === 'number')?args:cljs.core.cons((0),args));\nvar seq__32113 = cljs.core.seq(vec__32112);\nvar first__32114 = cljs.core.first(seq__32113);\nvar seq__32113__$1 = cljs.core.next(seq__32113);\nvar offset = first__32114;\nvar children = seq__32113__$1;\nreturn cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"align\",\"align\",1964212802),new cljs.core.Keyword(null,\"offset\",\"offset\",296498311),offset], null)], null),fipp.engine.serialize(children),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"outdent\",\"outdent\",467209411)], null)], null)], 0));\n}));\n/**\n * A transducer which annotates the right-side of nodes assuming a\n *   hypothetical single-line formatting of the document. Groups and indentation\n *   directives are temporarily assumed to be zero-width. These values are used\n *   by subsequent passes to produce the final layout.\n */\nfipp.engine.annotate_rights = (function fipp$engine$annotate_rights(rf){\nvar pos = cljs.core.volatile_BANG_((0));\nreturn (function() {\nvar G__32181 = null;\nvar G__32181__0 = (function (){\nreturn (rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null));\n});\nvar G__32181__1 = (function (res){\nreturn (rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(res) : rf.call(null,res));\n});\nvar G__32181__2 = (function (res,node){\nvar delta = (function (){var G__32120 = new cljs.core.Keyword(null,\"op\",\"op\",-1882987955).cljs$core$IFn$_invoke$arity$1(node);\nvar G__32120__$1 = (((G__32120 instanceof cljs.core.Keyword))?G__32120.fqn:null);\nswitch (G__32120__$1) {\ncase \"text\":\nreturn cljs.core.count(new cljs.core.Keyword(null,\"text\",\"text\",-1790561697).cljs$core$IFn$_invoke$arity$1(node));\n\nbreak;\ncase \"line\":\nreturn cljs.core.count(new cljs.core.Keyword(null,\"inline\",\"inline\",1399884222).cljs$core$IFn$_invoke$arity$1(node));\n\nbreak;\ncase \"escaped\":\nreturn (1);\n\nbreak;\ndefault:\nreturn (0);\n\n}\n})();\nvar p = pos.cljs$core$IVolatile$_vreset_BANG_$arity$2(null,(pos.cljs$core$IDeref$_deref$arity$1(null) + delta));\nvar G__32121 = res;\nvar G__32122 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(node,new cljs.core.Keyword(null,\"right\",\"right\",-452581833),p);\nreturn (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__32121,G__32122) : rf.call(null,G__32121,G__32122));\n});\nG__32181 = function(res,node){\nswitch(arguments.length){\ncase 0:\nreturn G__32181__0.call(this);\ncase 1:\nreturn G__32181__1.call(this,res);\ncase 2:\nreturn G__32181__2.call(this,res,node);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nG__32181.cljs$core$IFn$_invoke$arity$0 = G__32181__0;\nG__32181.cljs$core$IFn$_invoke$arity$1 = G__32181__1;\nG__32181.cljs$core$IFn$_invoke$arity$2 = G__32181__2;\nreturn G__32181;\n})()\n});\nfipp.engine.update_right = (function fipp$engine$update_right(var_args){\nvar args__4795__auto__ = [];\nvar len__4789__auto___32183 = arguments.length;\nvar i__4790__auto___32184 = (0);\nwhile(true){\nif((i__4790__auto___32184 < len__4789__auto___32183)){\nargs__4795__auto__.push((arguments[i__4790__auto___32184]));\n\nvar G__32185 = (i__4790__auto___32184 + (1));\ni__4790__auto___32184 = G__32185;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4796__auto__ = ((((2) < args__4795__auto__.length))?(new cljs.core.IndexedSeq(args__4795__auto__.slice((2)),(0),null)):null);\nreturn fipp.engine.update_right.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4796__auto__);\n});\n\n(fipp.engine.update_right.cljs$core$IFn$_invoke$arity$variadic = (function (deque,f,args){\nreturn fipp.deque.conjr(cljs.core.pop(deque),cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f,cljs.core.peek(deque),args));\n}));\n\n(fipp.engine.update_right.cljs$lang$maxFixedArity = (2));\n\n/** @this {Function} */\n(fipp.engine.update_right.cljs$lang$applyTo = (function (seq32123){\nvar G__32124 = cljs.core.first(seq32123);\nvar seq32123__$1 = cljs.core.next(seq32123);\nvar G__32125 = cljs.core.first(seq32123__$1);\nvar seq32123__$2 = cljs.core.next(seq32123__$1);\nvar self__4776__auto__ = this;\nreturn self__4776__auto__.cljs$core$IFn$_invoke$arity$variadic(G__32124,G__32125,seq32123__$2);\n}));\n\n/**\n * Given printing options, returns a transducer which annotate the right-side\n *   of groups on their :begin nodes.  This includes the pruning algorithm which\n *   will annotate some :begin nodes as being :too-far to the right without\n *   calculating their exact sizes.\n */\nfipp.engine.annotate_begins = (function fipp$engine$annotate_begins(p__32126){\nvar map__32127 = p__32126;\nvar map__32127__$1 = (((((!((map__32127 == null))))?(((((map__32127.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__32127.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__32127):map__32127);\nvar options = map__32127__$1;\nvar width = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32127__$1,new cljs.core.Keyword(null,\"width\",\"width\",-384071477));\nreturn (function (rf){\nvar pos = cljs.core.volatile_BANG_((0));\nvar bufs = cljs.core.volatile_BANG_(fipp.deque.empty);\nreturn (function() {\nvar G__32187 = null;\nvar G__32187__0 = (function (){\nreturn (rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null));\n});\nvar G__32187__1 = (function (res){\nreturn (rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(res) : rf.call(null,res));\n});\nvar G__32187__2 = (function (res,p__32129){\nvar map__32132 = p__32129;\nvar map__32132__$1 = (((((!((map__32132 == null))))?(((((map__32132.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__32132.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__32132):map__32132);\nvar node = map__32132__$1;\nvar op = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32132__$1,new cljs.core.Keyword(null,\"op\",\"op\",-1882987955));\nvar right = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32132__$1,new cljs.core.Keyword(null,\"right\",\"right\",-452581833));\nvar buffers = cljs.core.deref(bufs);\nif(cljs.core.empty_QMARK_(buffers)){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(op,new cljs.core.Keyword(null,\"begin\",\"begin\",-319034319))){\nvar position_STAR_ = (right + width);\nvar buffer = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"position\",\"position\",-2011731912),position_STAR_,new cljs.core.Keyword(null,\"nodes\",\"nodes\",-2099585805),fipp.deque.empty], null);\ncljs.core.vreset_BANG_(pos,position_STAR_);\n\ncljs.core.vreset_BANG_(bufs,(fipp.deque.create.cljs$core$IFn$_invoke$arity$1 ? fipp.deque.create.cljs$core$IFn$_invoke$arity$1(buffer) : fipp.deque.create.call(null,buffer)));\n\nreturn res;\n} else {\nreturn (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(res,node) : rf.call(null,res,node));\n}\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(op,new cljs.core.Keyword(null,\"end\",\"end\",-268185958))){\nvar buffer = cljs.core.peek(buffers);\nvar buffers_STAR_ = cljs.core.pop(buffers);\nvar begin = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"begin\",\"begin\",-319034319),new cljs.core.Keyword(null,\"right\",\"right\",-452581833),right], null);\nvar nodes = fipp.deque.conjlr(begin,new cljs.core.Keyword(null,\"nodes\",\"nodes\",-2099585805).cljs$core$IFn$_invoke$arity$1(buffer),node);\nif(cljs.core.empty_QMARK_(buffers_STAR_)){\ncljs.core.vreset_BANG_(pos,(0));\n\ncljs.core.vreset_BANG_(bufs,fipp.deque.empty);\n\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(rf,res,nodes);\n} else {\nif(cljs.core.vector_QMARK_(buffers_STAR_)){\n} else {\nthrow (new Error(\"Assert failed: (vector? buffers*)\"));\n}\n\nif(cljs.core.vector_QMARK_(nodes)){\n} else {\nthrow (new Error(\"Assert failed: (vector? nodes)\"));\n}\n\ncljs.core.vreset_BANG_(bufs,fipp.engine.update_right.cljs$core$IFn$_invoke$arity$variadic(buffers_STAR_,cljs.core.update_in,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"nodes\",\"nodes\",-2099585805)], null),fipp.deque.concat,nodes], 0)));\n\nreturn res;\n}\n} else {\nvar buffers_STAR_ = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(op,new cljs.core.Keyword(null,\"begin\",\"begin\",-319034319)))?fipp.deque.conjr(buffers,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"position\",\"position\",-2011731912),(right + width),new cljs.core.Keyword(null,\"nodes\",\"nodes\",-2099585805),fipp.deque.empty], null)):fipp.engine.update_right.cljs$core$IFn$_invoke$arity$variadic(buffers,cljs.core.update_in,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"nodes\",\"nodes\",-2099585805)], null),fipp.deque.conjr,node], 0)));\nvar res__$1 = res;\nwhile(true){\nif((((right <= cljs.core.deref(pos))) && ((cljs.core.count(buffers_STAR_) <= width)))){\ncljs.core.vreset_BANG_(bufs,buffers_STAR_);\n\nreturn res__$1;\n} else {\nvar buffer = cljs.core.first(buffers_STAR_);\nvar buffers_STAR__STAR_ = fipp.deque.popl(buffers_STAR_);\nvar begin = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"begin\",\"begin\",-319034319),new cljs.core.Keyword(null,\"right\",\"right\",-452581833),new cljs.core.Keyword(null,\"too-far\",\"too-far\",85800617)], null);\nvar res_STAR_ = (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(res__$1,begin) : rf.call(null,res__$1,begin));\nvar res_STAR___$1 = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(rf,res_STAR_,new cljs.core.Keyword(null,\"nodes\",\"nodes\",-2099585805).cljs$core$IFn$_invoke$arity$1(buffer));\nif(cljs.core.empty_QMARK_(buffers_STAR__STAR_)){\ncljs.core.vreset_BANG_(pos,(0));\n\ncljs.core.vreset_BANG_(bufs,fipp.deque.empty);\n\nreturn res_STAR___$1;\n} else {\ncljs.core.vreset_BANG_(pos,new cljs.core.Keyword(null,\"position\",\"position\",-2011731912).cljs$core$IFn$_invoke$arity$1(cljs.core.first(buffers_STAR__STAR_)));\n\nvar G__32195 = buffers_STAR__STAR_;\nvar G__32196 = res_STAR___$1;\nbuffers_STAR_ = G__32195;\nres__$1 = G__32196;\ncontinue;\n}\n}\nbreak;\n}\n}\n}\n});\nG__32187 = function(res,p__32129){\nswitch(arguments.length){\ncase 0:\nreturn G__32187__0.call(this);\ncase 1:\nreturn G__32187__1.call(this,res);\ncase 2:\nreturn G__32187__2.call(this,res,p__32129);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nG__32187.cljs$core$IFn$_invoke$arity$0 = G__32187__0;\nG__32187.cljs$core$IFn$_invoke$arity$1 = G__32187__1;\nG__32187.cljs$core$IFn$_invoke$arity$2 = G__32187__2;\nreturn G__32187;\n})()\n});\n});\n/**\n * Given printing options, returns a transducer which produces the fully\n *   laid-out strings.\n */\nfipp.engine.format_nodes = (function fipp$engine$format_nodes(p__32141){\nvar map__32142 = p__32141;\nvar map__32142__$1 = (((((!((map__32142 == null))))?(((((map__32142.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__32142.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__32142):map__32142);\nvar options = map__32142__$1;\nvar width = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32142__$1,new cljs.core.Keyword(null,\"width\",\"width\",-384071477));\nreturn (function (rf){\nvar fits = cljs.core.volatile_BANG_((0));\nvar length = cljs.core.volatile_BANG_(width);\nvar tab_stops = cljs.core.volatile_BANG_(cljs.core.list((0)));\nvar column = cljs.core.volatile_BANG_((0));\nreturn (function() {\nvar G__32197 = null;\nvar G__32197__0 = (function (){\nreturn (rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null));\n});\nvar G__32197__1 = (function (res){\nreturn (rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(res) : rf.call(null,res));\n});\nvar G__32197__2 = (function (res,p__32146){\nvar map__32147 = p__32146;\nvar map__32147__$1 = (((((!((map__32147 == null))))?(((((map__32147.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__32147.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__32147):map__32147);\nvar node = map__32147__$1;\nvar op = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32147__$1,new cljs.core.Keyword(null,\"op\",\"op\",-1882987955));\nvar right = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32147__$1,new cljs.core.Keyword(null,\"right\",\"right\",-452581833));\nvar indent = cljs.core.peek(cljs.core.deref(tab_stops));\nvar G__32149 = op;\nvar G__32149__$1 = (((G__32149 instanceof cljs.core.Keyword))?G__32149.fqn:null);\nswitch (G__32149__$1) {\ncase \"text\":\nvar text = new cljs.core.Keyword(null,\"text\",\"text\",-1790561697).cljs$core$IFn$_invoke$arity$1(node);\nvar res_STAR_ = (((cljs.core.deref(column) === (0)))?(function (){\ncolumn.cljs$core$IVolatile$_vreset_BANG_$arity$2(null,(column.cljs$core$IDeref$_deref$arity$1(null) + indent));\n\nvar G__32151 = res;\nvar G__32152 = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(indent,\" \"));\nreturn (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__32151,G__32152) : rf.call(null,G__32151,G__32152));\n})()\n:res);\ncolumn.cljs$core$IVolatile$_vreset_BANG_$arity$2(null,(column.cljs$core$IDeref$_deref$arity$1(null) + cljs.core.count(text)));\n\nreturn (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(res_STAR_,text) : rf.call(null,res_STAR_,text));\n\nbreak;\ncase \"escaped\":\nvar text = new cljs.core.Keyword(null,\"text\",\"text\",-1790561697).cljs$core$IFn$_invoke$arity$1(node);\nvar res_STAR_ = (((cljs.core.deref(column) === (0)))?(function (){\ncolumn.cljs$core$IVolatile$_vreset_BANG_$arity$2(null,(column.cljs$core$IDeref$_deref$arity$1(null) + indent));\n\nvar G__32155 = res;\nvar G__32156 = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(indent,\" \"));\nreturn (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__32155,G__32156) : rf.call(null,G__32155,G__32156));\n})()\n:res);\ncolumn.cljs$core$IVolatile$_vreset_BANG_$arity$2(null,(column.cljs$core$IDeref$_deref$arity$1(null) + (1)));\n\nreturn (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(res_STAR_,text) : rf.call(null,res_STAR_,text));\n\nbreak;\ncase \"pass\":\nvar G__32157 = res;\nvar G__32158 = new cljs.core.Keyword(null,\"text\",\"text\",-1790561697).cljs$core$IFn$_invoke$arity$1(node);\nreturn (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__32157,G__32158) : rf.call(null,G__32157,G__32158));\n\nbreak;\ncase \"line\":\nif((cljs.core.deref(fits) === (0))){\ncljs.core.vreset_BANG_(length,((right + width) - indent));\n\ncljs.core.vreset_BANG_(column,(0));\n\nvar G__32159 = res;\nvar G__32160 = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"terminate\",\"terminate\",1256003496).cljs$core$IFn$_invoke$arity$1(node)),\"\\n\"].join('');\nreturn (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__32159,G__32160) : rf.call(null,G__32159,G__32160));\n} else {\nvar inline = new cljs.core.Keyword(null,\"inline\",\"inline\",1399884222).cljs$core$IFn$_invoke$arity$1(node);\ncolumn.cljs$core$IVolatile$_vreset_BANG_$arity$2(null,(column.cljs$core$IDeref$_deref$arity$1(null) + cljs.core.count(inline)));\n\nreturn (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(res,inline) : rf.call(null,res,inline));\n}\n\nbreak;\ncase \"break\":\ncljs.core.vreset_BANG_(length,((right + width) - indent));\n\ncljs.core.vreset_BANG_(column,(0));\n\nreturn (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(res,\"\\n\") : rf.call(null,res,\"\\n\"));\n\nbreak;\ncase \"nest\":\ntab_stops.cljs$core$IVolatile$_vreset_BANG_$arity$2(null,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(tab_stops.cljs$core$IDeref$_deref$arity$1(null),(indent + new cljs.core.Keyword(null,\"offset\",\"offset\",296498311).cljs$core$IFn$_invoke$arity$1(node))));\n\nreturn res;\n\nbreak;\ncase \"align\":\ntab_stops.cljs$core$IVolatile$_vreset_BANG_$arity$2(null,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(tab_stops.cljs$core$IDeref$_deref$arity$1(null),(cljs.core.deref(column) + new cljs.core.Keyword(null,\"offset\",\"offset\",296498311).cljs$core$IFn$_invoke$arity$1(node))));\n\nreturn res;\n\nbreak;\ncase \"outdent\":\ntab_stops.cljs$core$IVolatile$_vreset_BANG_$arity$2(null,cljs.core.pop(tab_stops.cljs$core$IDeref$_deref$arity$1(null)));\n\nreturn res;\n\nbreak;\ncase \"begin\":\ncljs.core.vreset_BANG_(fits,(((cljs.core.deref(fits) > (0)))?(cljs.core.deref(fits) + (1)):((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(right,new cljs.core.Keyword(null,\"too-far\",\"too-far\",85800617)))?(0):(((right <= cljs.core.deref(length)))?(1):(0)\n))));\n\nreturn res;\n\nbreak;\ncase \"end\":\ncljs.core.vreset_BANG_(fits,(function (){var x__4273__auto__ = (0);\nvar y__4274__auto__ = (cljs.core.deref(fits) - (1));\nreturn ((x__4273__auto__ > y__4274__auto__) ? x__4273__auto__ : y__4274__auto__);\n})());\n\nreturn res;\n\nbreak;\ndefault:\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Unexpected node op\",new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"node\",\"node\",581201198),node], null));\n\n}\n});\nG__32197 = function(res,p__32146){\nswitch(arguments.length){\ncase 0:\nreturn G__32197__0.call(this);\ncase 1:\nreturn G__32197__1.call(this,res);\ncase 2:\nreturn G__32197__2.call(this,res,p__32146);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nG__32197.cljs$core$IFn$_invoke$arity$0 = G__32197__0;\nG__32197.cljs$core$IFn$_invoke$arity$1 = G__32197__1;\nG__32197.cljs$core$IFn$_invoke$arity$2 = G__32197__2;\nreturn G__32197;\n})()\n});\n});\nfipp.engine.pprint_document = (function fipp$engine$pprint_document(var_args){\nvar G__32162 = arguments.length;\nswitch (G__32162) {\ncase 1:\nreturn fipp.engine.pprint_document.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn fipp.engine.pprint_document.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(fipp.engine.pprint_document.cljs$core$IFn$_invoke$arity$1 = (function (document){\nreturn fipp.engine.pprint_document.cljs$core$IFn$_invoke$arity$2(document,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(fipp.engine.pprint_document.cljs$core$IFn$_invoke$arity$2 = (function (document,options){\nvar options_32204__$1 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"width\",\"width\",-384071477),(70)], null),options], 0));\ncljs.core.run_BANG_(cljs.core.print,cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([fipp.engine.annotate_rights,fipp.engine.annotate_begins(options_32204__$1),fipp.engine.format_nodes(options_32204__$1),fipp.engine.serialize(document)], 0)));\n\nreturn cljs.core.println();\n}));\n\n(fipp.engine.pprint_document.cljs$lang$maxFixedArity = 2);\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","See: Oleg Kiselyov, Simon Peyton-Jones, and Amr Sabry\n  Lazy v. Yield: Incremental, Linear Pretty-printing","~:file","fipp/engine.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",16],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$fipp.engine","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.string","^P","~$s","^P","~$fipp.deque","^Q","~$deque","^Q","~$cljs.core","^S","~$goog","^T"],"~:seen",["^I",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^S","^S"],"~:form",["~#list",["~$ns","^K","See: Oleg Kiselyov, Simon Peyton-Jones, and Amr Sabry\n  Lazy v. Yield: Incremental, Linear Pretty-printing",["^Z",["^V",["^P","~:as","~$s"],["^Q","^10","^R"]]]]],"~:flags",["^ ","^V",["^I",[]]],"~:js-deps",["^ "],"~:deps",["^T","^S","^P","^Q"]],"^M","^K","~:resource-id",["~:shadow.build.classpath/resource","fipp/engine.cljc"],"~:compiled-at",1586645237210,"~:resource-name","fipp/engine.cljc","~:warnings",[],"~:source","(ns fipp.engine\n  \"See: Oleg Kiselyov, Simon Peyton-Jones, and Amr Sabry\n  Lazy v. Yield: Incremental, Linear Pretty-printing\"\n  (:require [clojure.string :as s]\n            [fipp.deque :as deque]))\n\n\n;;; Serialize document into a stream\n\n(defmulti serialize-node first)\n\n(defn serialize [doc]\n  (cond\n    (nil? doc) nil\n    (seq? doc) (mapcat serialize doc)\n    (string? doc) [{:op :text, :text doc}]\n    (keyword? doc) (serialize-node [doc])\n    (vector? doc) (serialize-node doc)\n    :else (throw (ex-info \"Unexpected class for doc node\" {:node doc}))))\n\n;; Primitives\n;; See doc/primitives.md for details.\n\n(defmethod serialize-node :text [[_ & text]]\n  [{:op :text, :text (apply str text)}])\n\n(defmethod serialize-node :pass [[_ & text]]\n  [{:op :pass, :text (apply str text)}])\n\n(defmethod serialize-node :escaped [[_ text]]\n  (assert (string? text))\n  [{:op :escaped, :text text}])\n\n(defmethod serialize-node :span [[_ & children]]\n  (serialize children))\n\n(defmethod serialize-node :line [[_ inline terminate]]\n  (let [inline (or inline \" \")\n        terminate (or terminate \"\")]\n    (assert (string? inline))\n    (assert (string? terminate))\n    [{:op :line, :inline inline, :terminate terminate}]))\n\n(defmethod serialize-node :break [& _]\n  [{:op :break}])\n\n(defmethod serialize-node :group [[_ & children]]\n  (concat [{:op :begin}] (serialize children) [{:op :end}]))\n\n(defmethod serialize-node :nest [[_ & args]]\n  (let [[offset & children] (if (number? (first args))\n                              args\n                              (cons 2 args))]\n    (concat [{:op :nest, :offset offset}]\n            (serialize children)\n            [{:op :outdent}])))\n\n(defmethod serialize-node :align [[_ & args]]\n  (let [[offset & children] (if (number? (first args))\n                             args\n                             (cons 0 args))]\n    (concat [{:op :align, :offset offset}]\n            (serialize children)\n            [{:op :outdent}])))\n\n\n\n(defn annotate-rights\n  \"A transducer which annotates the right-side of nodes assuming a\n  hypothetical single-line formatting of the document. Groups and indentation\n  directives are temporarily assumed to be zero-width. These values are used\n  by subsequent passes to produce the final layout.\"\n  [rf]\n  (let [pos (volatile! 0)]\n    (fn\n      ([] (rf))\n      ([res] (rf res))\n      ([res node]\n       (let [delta (case (:op node)\n                     :text (count (:text node))\n                     :line (count (:inline node))\n                     :escaped 1\n                     0)\n             p (vswap! pos + delta)]\n         (rf res (assoc node :right p)))))))\n\n\n\n(defn update-right [deque f & args]\n  (deque/conjr (pop deque) (apply f (peek deque) args)))\n\n(defn annotate-begins\n  \"Given printing options, returns a transducer which annotate the right-side\n  of groups on their :begin nodes.  This includes the pruning algorithm which\n  will annotate some :begin nodes as being :too-far to the right without\n  calculating their exact sizes.\"\n  [{:keys [width] :as options}]\n  (fn [rf]\n    (let [pos (volatile! 0)\n          bufs (volatile! deque/empty)]\n      (fn\n        ([] (rf))\n        ([res] (rf res))\n        ([res {:keys [op right] :as node}]\n         (let [buffers @bufs]\n           (if (empty? buffers)\n             (if (= op :begin)\n               ;; Buffer groups\n               (let [position* (+ right width)\n                     buffer {:position position* :nodes deque/empty}]\n                 (vreset! pos position*)\n                 (vreset! bufs (deque/create buffer))\n                 res)\n               ;; Emit unbuffered\n               (rf res node))\n             (if (= op :end)\n               ;; Pop buffer\n               (let [buffer (peek buffers)\n                     buffers* (pop buffers)\n                     begin {:op :begin :right right}\n                     nodes (deque/conjlr begin (:nodes buffer) node)]\n                 (if (empty? buffers*)\n                   (do\n                     (vreset! pos 0)\n                     (vreset! bufs deque/empty)\n                     (reduce rf res nodes))\n                   (do\n                     (assert (vector? buffers*))\n                     (assert (vector? nodes))\n                     (vreset! bufs (update-right buffers* update-in [:nodes]\n                                                 deque/concat nodes))\n                     res)))\n               ;; Pruning lookahead\n               (loop [buffers* (if (= op :begin)\n                                 (deque/conjr buffers\n                                              {:position (+ right width)\n                                               :nodes deque/empty})\n                                 (update-right buffers update-in [:nodes]\n                                               deque/conjr node))\n                      res res]\n                 (if (and (<= right @pos) (<= (count buffers*) width))\n                   ;; Not too far\n                   (do (vreset! bufs buffers*)\n                       res)\n                   ;; Too far\n                   (let [buffer (first buffers*)\n                         buffers** (deque/popl buffers*)\n                         begin {:op :begin, :right :too-far}\n                         res* (rf res begin)\n                         res* (reduce rf res* (:nodes buffer))]\n                     (if (empty? buffers**)\n                       ;; Root buffered group\n                       (do\n                         (vreset! pos 0)\n                         (vreset! bufs deque/empty)\n                         res*)\n                       ;; Interior group\n                       (do\n                         (vreset! pos (:position (first buffers**)))\n                         (recur buffers** res*))))))\n            ))))))))\n\n\n(defn format-nodes\n  \"Given printing options, returns a transducer which produces the fully\n  laid-out strings.\"\n  [{:keys [width] :as options}]\n  (fn [rf]\n    (let [fits (volatile! 0)\n          length (volatile! width)\n          tab-stops (volatile! '(0)) ; Technically, an unbounded stack...\n          column (volatile! 0)]\n      (fn\n        ([] (rf))\n        ([res] (rf res))\n        ([res {:keys [op right] :as node}]\n         (let [indent (peek @tab-stops)]\n           (case op\n             :text\n               (let [text (:text node)\n                     res* (if (zero? @column)\n                            (do (vswap! column + indent)\n                                (rf res (apply str (repeat indent \\space))))\n                            res)]\n                 (vswap! column + (count text))\n                 (rf res* text))\n             :escaped\n               (let [text (:text node)\n                     res* (if (zero? @column)\n                            (do (vswap! column + indent)\n                                (rf res (apply str (repeat indent \\space))))\n                            res)]\n                 (vswap! column inc)\n                 (rf res* text))\n             :pass\n               (rf res (:text node))\n             :line\n               (if (zero? @fits)\n                 (do\n                   (vreset! length (- (+ right width) indent))\n                   (vreset! column 0)\n                   (rf res (str (:terminate node) \"\\n\")))\n                 (let [inline (:inline node)]\n                   (vswap! column + (count inline))\n                   (rf res inline)))\n             :break\n               (do\n                 (vreset! length (- (+ right width) indent))\n                 (vreset! column 0)\n                 (rf res \"\\n\"))\n             :nest\n               (do (vswap! tab-stops conj (+ indent (:offset node)))\n                   res)\n             :align\n               (do (vswap! tab-stops conj (+ @column (:offset node)))\n                   res)\n             :outdent\n               (do (vswap! tab-stops pop)\n                   res)\n             :begin\n               (do (vreset! fits (cond\n                                   (pos? @fits) (inc @fits)\n                                   (= right :too-far) 0\n                                   (<= right @length) 1\n                                   :else 0))\n                   res)\n             :end\n               (do (vreset! fits (max 0 (dec @fits)))\n                   res)\n             (throw (ex-info \"Unexpected node op\" {:node node}))))\n         )))))\n\n\n(defn pprint-document\n  ([document]\n   (pprint-document document {}))\n  ([document options]\n   (let [options (merge {:width 70} options)]\n     (->> (serialize document)\n          (eduction\n            annotate-rights\n            (annotate-begins options)\n            (format-nodes options))\n          (run! print)))\n   (println)))\n\n\n(comment\n\n  (defn dbg [x]\n    (println \"DBG:\")\n    (clojure.pprint/pprint x)\n    (println \"----\")\n    x)\n\n  (serialize \"apple\")\n  (serialize [:text \"apple\" \"ball\"])\n  (serialize [:span \"apple\" [:group \"ball\" :line \"cat\"]])\n  (serialize [:span \"apple\" [:line \",\"] \"ball\"])\n\n  (def doc1 [:group \"A\" :line [:group \"B\" :line \"C\"]])\n  (def doc2 [:group \"A\" :line [:nest 2 \"B\" :line \"C\"] :line \"D\"])\n  (def doc3 [:group \"A\" :line\n             [:nest 2 \"B-XYZ\" [:align -3 :line \"C\"]] :line \"D\"])\n\n  (serialize doc1)\n\n  (let [options {:width 3}]\n    (->> doc3\n         serialize\n         (into [] (comp\n                    annotate-rights\n                    (annotate-begins options)\n                    (format-nodes options)\n                    ))\n         ;(run! print)\n         clojure.pprint/pprint\n         )\n    ;nil\n    )\n\n  ;; test of :pass op\n  (do\n    (pprint-document\n      [:group \"AB\" :line \"B\" :line \"C\"]\n      {:width 6}) \n    (println \"--\")\n    (pprint-document\n      [:group \"<AB>\" :line \"B\" :line \"C\"]\n      {:width 6}) \n    (println \"--\")\n    (pprint-document\n      [:group [:pass \"<\"] \"AB\" [:pass \">\"] :line \"B\" :line \"C\"]\n      {:width 6}))\n\n  (def ex1\n    [:group \"[\"\n        [:nest 2\n            [:line \"\"] \"0,\"\n            :line \"1,\"\n            :line \"2,\"\n            :line \"3\"\n            [:line \"\"]]\n        \"]\"])\n\n  (pprint-document ex1 {:width 20})\n  (pprint-document ex1 {:width 6})\n\n  (def ex2\n    [:span \"[\"\n        [:align\n            [:group [:line \"\"]] \"0,\"\n            [:group :line] \"1,\"\n            [:group :line] \"2,\"\n            [:group :line] \"3\"]\n        \"]\"])\n\n  (pprint-document ex2 {:width 20})\n  (pprint-document ex2 {:width 6})\n\n)\n","~:reader-features",["^I",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["js/fipp","js/fipp.engine","js/fipp.engine.serialize-node","method-table__4672__auto__","cljs.core.atom","prefer-table__4673__auto__","method-cache__4674__auto__","cached-hierarchy__4675__auto__","hierarchy__4676__auto__","cljs.core.get","fexpr__32035","cljs.core/MultiFn","cljs.core.symbol","fipp.engine/serialize-node","cljs.core/first","fipp.engine/serialize","doc","cljs.core/seq?","cljs.core.mapcat","cljs.core/Keyword","cljs.core/vector?","cljs.core.ex_info","p__32036","vec__32037","seq__32038","cljs.core/seq","first__32039","cljs.core/next","_","text","cljs.core.apply","cljs.core/str","p__32040","vec__32041","seq__32042","first__32043","p__32051","vec__32052","cljs.core.nth","js/Error","p__32059","vec__32064","seq__32065","first__32066","children","p__32070","vec__32071","inline","terminate","or__4185__auto__","p__32078","vec__32080","seq__32081","first__32082","cljs.core.concat","p__32087","vec__32088","seq__32089","first__32090","args","vec__32099","seq__32100","first__32101","offset","cljs.core/cons","p__32108","vec__32109","seq__32110","first__32111","vec__32112","seq__32113","first__32114","fipp.engine/annotate-rights","rf","pos","cljs.core/volatile!","res","node","delta","G__32120","cljs.core/count","p","G__32121","G__32122","cljs.core.assoc","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","fipp.engine/update-right","seq32123","G__32124","G__32125","self__4776__auto__","deque","f","fipp.deque/conjr","cljs.core/pop","cljs.core/peek","p__32126","map__32127","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","fipp.engine/annotate-begins","width","options","bufs","fipp.deque/empty","p__32129","map__32132","op","right","cljs.core/deref","buffers","cljs.core/empty?","cljs.core._EQ_","position*","buffer","cljs.core/vreset!","fipp.deque/create","buffers*","begin","nodes","fipp.deque/conjlr","cljs.core.reduce","fipp.engine.update_right","cljs.core/update-in","fipp.deque/concat","buffers**","fipp.deque/popl","res*","p__32141","map__32142","fipp.engine/format-nodes","fits","length","tab-stops","column","p__32146","map__32147","indent","G__32149","G__32151","G__32152","cljs.core.repeat","G__32155","G__32156","G__32157","G__32158","G__32159","G__32160","cljs.core.conj","x__4273__auto__","y__4274__auto__","G__32162","fipp.engine/pprint-document","document","fipp.engine.pprint_document","cljs.core.merge","cljs.core.eduction","cljs.core/run!","cljs.core/print","cljs.core/println"]],"~:used-vars",["^I",["~$cljs.core/mapcat","~$cljs.core/str","~$cljs.core/MultiFn","~$cljs.core/vector?","~$cljs.core/=","~$cljs.core/-deref","~$cljs.core/count","~$cljs.core/deref","~$fipp.deque/conjr","~$cljs.core/reduce","~$cljs.core/apply","~$cljs.core/Keyword","~$js/fipp.engine.serialize-node","~$cljs.core/vreset!","~$fipp.engine/serialize-node","~$cljs.core/concat","~$cljs.core/print","~$cljs.core/pop","~$cljs.core/empty?","~$js/fipp.engine","~$cljs.core/conj","~$cljs.core/run!","~$cljs.core/peek","~$fipp.engine/pprint-document","~$cljs.core/-add-method","~$js/fipp","~$cljs.core/-vreset!","~$cljs.core/symbol","~$fipp.engine/format-nodes","~$fipp.deque/concat","~$cljs.core/ex-info","~$fipp.engine/serialize","~$cljs.core/println","~$fipp.engine/update-right","~$fipp.engine/annotate-rights","~$fipp.deque/create","~$cljs.core/first","~$cljs.core/seq?","~$cljs.core/eduction","~$cljs.core/update-in","~$fipp.deque/empty","~$js/Error","~$fipp.engine/annotate-begins"]]],"~:cache-keys",["~#cmap",[["^15","goog/dom/tagname.js"],[1586644092443,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^I",[]],"~:deps-syms",["^T","~$goog.dom.HtmlElement"]]],["^15","goog/math/math.js"],[1586644092443,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^T","~$goog.array","~$goog.asserts"]]],["^15","goog/html/trustedtypes.js"],[1586644092443,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^T"]]],["^15","goog/labs/useragent/browser.js"],[1586644092443,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^T","^2G","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^15","goog/html/safeurl.js"],[1586644092443,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^T","^2H","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^2K"]]],["^15","goog/array/array.js"],[1586644092443,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^T","^2H"]]],["^15","clojure/core/rrb_vector/rrbt.cljs"],[1585781239859,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^T","^S","~$clojure.core.rrb-vector.protocols","~$clojure.core.rrb-vector.nodes","~$clojure.core.rrb-vector.trees","~$clojure.core.rrb-vector.transients"]]],["^15","clojure/core/rrb_vector.cljs"],[1585781239859,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^T","^S","^2R","~$clojure.core.rrb-vector.rrbt","~$clojure.core.rrb-vector.interop"]]],["^15","goog/debug/error.js"],[1586644092443,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^T"]]],["^15","clojure/core/rrb_vector/trees.cljs"],[1585781239859,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^T","^S","^2S"]]],["^15","clojure/core/rrb_vector/nodes.cljs"],[1585781239859,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^T","^S"]]],["^15","goog/dom/nodetype.js"],[1586644092443,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^T"]]],["^15","fipp/deque.cljc"],[1586644097212,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^T","^S","~$clojure.core.rrb-vector"]]],["^15","fipp/engine.cljc"],[1586644097212,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^T","^S","^P","^Q"]]],["^15","clojure/core/rrb_vector/transients.cljs"],[1585781239859,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^T","^S","^2S","^2T"]]],["^15","goog/string/typedstring.js"],[1586644092443,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^T"]]],["^15","goog/object/object.js"],[1586644092443,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^T"]]],["^15","goog/dom/asserts.js"],[1586644092443,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^T","^2H"]]],"~:SHADOW-TIMESTAMP",[1586644100000,1586644100000,1585781238000],["^15","goog/math/long.js"],[1586644092443,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^T","^2H","~$goog.reflect"]]],["^15","goog/html/trustedresourceurl.js"],[1586644092443,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^T","^2H","~$goog.html.trustedtypes","^2N","^2O","^2P","^2Q"]]],["^15","goog/string/internal.js"],[1586644092443,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^T"]]],["^15","goog/functions/functions.js"],[1586644092443,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^T"]]],["^15","goog/html/safestyle.js"],[1586644092443,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^T","^2G","^2H","~$goog.html.SafeUrl","^2P","^2Q","^2K"]]],["^15","goog/dom/safe.js"],[1586644092443,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^T","^2H","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^30","^2M","~$goog.html.uncheckedconversions","^2P","^2K"]]],["^15","goog/structs/map.js"],[1586644092443,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^T","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^15","goog/html/safehtml.js"],[1586644092443,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^T","^2G","^2H","~$goog.dom.TagName","~$goog.dom.tags","^34","^35","~$goog.html.SafeStyleSheet","^30","^2M","^2[","^2N","^2O","~$goog.labs.userAgent.browser","^2J","^2P","^2Q","^2K"]]],["^15","goog/dom/tags.js"],[1586644092443,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^T","^2J"]]],["^15","goog/asserts/asserts.js"],[1586644092443,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^T","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^15","goog/uri/uri.js"],[1586644092443,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^T","^2G","^2H","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^15","goog/i18n/bidi.js"],[1586644092443,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^T"]]],["^15","goog/fs/url.js"],[1586644092443,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^T"]]],["^15","goog/base.js"],[1586644092443,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",[]]],["^15","goog/structs/structs.js"],[1586644092443,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^T","^2G","^2J"]]],["^15","clojure/string.cljs"],[1585781238779,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^T","^S","^3?","~$goog.string.StringBuffer"]]],["^15","clojure/core/rrb_vector/interop.cljs"],[1585781239859,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^T","^S","^2R","^2V"]]],["^15","goog/string/string.js"],[1586644092443,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^T","~$goog.dom.safe","^36","^2P","^2K"]]],["^15","clojure/core/rrb_vector/protocols.cljs"],[1585781239859,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^T","^S"]]],["^15","goog/reflect/reflect.js"],[1586644092443,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^T"]]],["^15","goog/labs/useragent/util.js"],[1586644092443,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^T","^2K"]]],["^15","goog/string/stringbuffer.js"],[1586644092443,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^T"]]],["^15","goog/iter/iter.js"],[1586644092443,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^T","^2G","^2H","^32","~$goog.math"]]],["^15","goog/html/uncheckedconversions.js"],[1586644092443,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^T","^2H","^33","^34","^35","^3;","^30","^2M","^2P","^2K"]]],["^15","goog/dom/htmlelement.js"],[1586644092443,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^T"]]],["^15","cljs/core.cljs"],[1585781238779,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^T","~$goog.math.Long","~$goog.math.Integer","^3?","^2J","^2G","~$goog.Uri","^3E"]]],["^15","goog/html/safescript.js"],[1586644092443,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^T","^2H","^2[","^2P","^2Q"]]],["^15","goog/html/safestylesheet.js"],[1586644092443,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^T","^2G","^2H","^35","^2J","^2P","^2Q","^2K"]]],["^15","goog/math/integer.js"],[1586644092443,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^T","^2Z"]]],["^15","goog/uri/utils.js"],[1586644092443,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^T","^2G","^2H","^3?"]]],["^15","goog/string/const.js"],[1586644092443,"^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^T","^2H","^2Q"]]]]],"~:clj-info",["^ ","jar:file:/Users/sotiris/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1585781237000,"jar:file:/Users/sotiris/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1585781237000,"jar:file:/Users/sotiris/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map/base64_vlq.clj",1585781238000,"jar:file:/Users/sotiris/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/js_deps.cljc",1585781238000,"jar:file:/Users/sotiris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1581178465000,"jar:file:/Users/sotiris/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map.clj",1585781238000,"jar:file:/Users/sotiris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1581178465000,"jar:file:/Users/sotiris/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/tagged_literals.cljc",1585781238000,"jar:file:/Users/sotiris/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1585781237000,"jar:file:/Users/sotiris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1581178465000,"jar:file:/Users/sotiris/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/env.cljc",1585781238000,"jar:file:/Users/sotiris/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/externs.clj",1585781238000,"jar:file:/Users/sotiris/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/analyzer.cljc",1585781238000,"jar:file:/Users/sotiris/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/compiler.cljc",1585781238000,"jar:file:/Users/sotiris/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/util.cljc",1585781238000,"jar:file:/Users/sotiris/.m2/repository/org/clojure/core.rrb-vector/0.0.14/core.rrb-vector-0.0.14.jar!/clojure/core/rrb_vector/macros.clj",1585781239000,"jar:file:/Users/sotiris/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1584832190000,"jar:file:/Users/sotiris/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1585781237000,"jar:file:/Users/sotiris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1581178465000,"jar:file:/Users/sotiris/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map/base64.clj",1585781238000,"jar:file:/Users/sotiris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1581178465000,"jar:file:/Users/sotiris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1581178465000,"jar:file:/Users/sotiris/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/core.cljc",1585781238000,"jar:file:/Users/sotiris/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1585781237000,"jar:file:/Users/sotiris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1581178465000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","See: Oleg Kiselyov, Simon Peyton-Jones, and Amr Sabry\n  Lazy v. Yield: Incremental, Linear Pretty-printing","^7","fipp/engine.cljc","^8",1,"^9",5,"^:",1,"^;",16],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F"],"^G",null,"^H",["^I",[]],"^J","^K","^N",null,"^O",["^ ","^P","^P","~$s","^P","^Q","^Q","^R","^Q","^S","^S","^T","^T"],"^U",["^I",["^V"]],"~:shadow/js-access-global",["^I",["Error"]],"^W",null,"~:defs",["^ ","~$serialize-node",["^ ","^J","^1O","^7","fipp/engine.cljc","^8",10,"^9",1,"^:",10,"^;",25,"^5",["^ ","^7","fipp/engine.cljc","^8",10,"^9",11,"^:",10,"^;",25],"~:tag","^1C"],"~$serialize",["^ ","~:protocol-inline",null,"^5",["^ ","^7","fipp/engine.cljc","^8",12,"^9",7,"^:",12,"^;",16,"~:arglists",["^Z",["~$quote",["^Z",[["~$doc"]]]]]],"^J","^24","^7","fipp/engine.cljc","^;",16,"~:method-params",["^Z",[["^4B"]]],"~:protocol-impl",null,"~:arglists-meta",["^Z",[null,null]],"^9",1,"~:variadic?",false,"^8",12,"~:ret-tag",["^I",["~$cljs.core/IVector","~$any","~$clj-nil"]],"^:",12,"~:max-fixed-arity",1,"~:fn-var",true,"^4@",["^Z",["^4A",["^Z",[["^4B"]]]]]],"~$annotate-rights",["^ ","^4?",null,"^5",["^ ","^7","fipp/engine.cljc","^8",68,"^9",7,"^:",68,"^;",22,"^4@",["^Z",["^4A",["^Z",[["~$rf"]]]]],"^6","A transducer which annotates the right-side of nodes assuming a\n  hypothetical single-line formatting of the document. Groups and indentation\n  directives are temporarily assumed to be zero-width. These values are used\n  by subsequent passes to produce the final layout."],"^J","^27","^7","fipp/engine.cljc","^;",22,"^4C",["^Z",[["^4N"]]],"^4D",null,"^4E",["^Z",[null,null]],"^9",1,"^4F",false,"^8",68,"^4G","~$function","^:",68,"^4K",1,"^4L",true,"^4@",["^Z",["^4A",["^Z",[["^4N"]]]]],"^6","A transducer which annotates the right-side of nodes assuming a\n  hypothetical single-line formatting of the document. Groups and indentation\n  directives are temporarily assumed to be zero-width. These values are used\n  by subsequent passes to produce the final layout."],"~$update-right",["^ ","^4?",null,"^5",["^ ","^7","fipp/engine.cljc","^8",89,"^9",7,"^:",89,"^;",19,"^4@",["^Z",["^4A",["^Z",[["^R","~$f","~$&","~$args"]]]]],"~:top-fn",["^ ","^4F",true,"~:fixed-arity",2,"^4K",2,"^4C",[["^Z",["^R","~$f","^4Q"]]],"^4@",["^Z",[["^R","~$f","~$&","^4Q"]]],"^4E",["^Z",[null]]]],"^J","^26","^7","fipp/engine.cljc","^;",19,"^4R",["^ ","^4F",true,"^4S",2,"^4K",2,"^4C",[["^Z",["^R","~$f","^4Q"]]],"^4@",["^Z",[["^R","~$f","~$&","^4Q"]]],"^4E",["^Z",[null]]],"^4C",[["^Z",["^R","~$f","^4Q"]]],"^4D",null,"^4S",2,"^4E",["^Z",[null]],"^9",1,"^4F",true,"~:methods",[["^ ","^4S",2,"^4F",true,"^4=","^4I"]],"^8",89,"^4G","^4I","^:",89,"^4K",2,"^4L",true,"^4@",["^Z",[["^R","~$f","~$&","^4Q"]]]],"~$annotate-begins",["^ ","^4?",null,"^5",["^ ","^7","fipp/engine.cljc","^8",92,"^9",7,"^:",92,"^;",22,"^4@",["^Z",["^4A",["^Z",[[["^ ","~:keys",["~$width"],"^10","~$options"]]]]]],"^6","Given printing options, returns a transducer which annotate the right-side\n  of groups on their :begin nodes.  This includes the pruning algorithm which\n  will annotate some :begin nodes as being :too-far to the right without\n  calculating their exact sizes."],"^J","^2?","^7","fipp/engine.cljc","^;",22,"^4C",["^Z",[["~$p__32126"]]],"^4D",null,"^4E",["^Z",[null,null]],"^9",1,"^4F",false,"^8",92,"^4G","^4O","^:",92,"^4K",1,"^4L",true,"^4@",["^Z",["^4A",["^Z",[[["^ ","^4V",["^4W"],"^10","^4X"]]]]]],"^6","Given printing options, returns a transducer which annotate the right-side\n  of groups on their :begin nodes.  This includes the pruning algorithm which\n  will annotate some :begin nodes as being :too-far to the right without\n  calculating their exact sizes."],"~$format-nodes",["^ ","^4?",null,"^5",["^ ","^7","fipp/engine.cljc","^8",164,"^9",7,"^:",164,"^;",19,"^4@",["^Z",["^4A",["^Z",[[["^ ","^4V",["^4W"],"^10","^4X"]]]]]],"^6","Given printing options, returns a transducer which produces the fully\n  laid-out strings."],"^J","^21","^7","fipp/engine.cljc","^;",19,"^4C",["^Z",[["~$p__32141"]]],"^4D",null,"^4E",["^Z",[null,null]],"^9",1,"^4F",false,"^8",164,"^4G","^4O","^:",164,"^4K",1,"^4L",true,"^4@",["^Z",["^4A",["^Z",[[["^ ","^4V",["^4W"],"^10","^4X"]]]]]],"^6","Given printing options, returns a transducer which produces the fully\n  laid-out strings."],"~$pprint-document",["^ ","^4?",null,"^5",["^ ","^7","fipp/engine.cljc","^8",234,"^9",7,"^:",234,"^;",22,"^4@",["^Z",["^4A",["^Z",[["~$document"],["^51","^4X"]]]]],"^4R",["^ ","^4F",false,"^4S",2,"^4K",2,"^4C",["^Z",[["^51"],["^51","^4X"]]],"^4@",["^Z",[["^51"],["^51","^4X"]]],"^4E",["^Z",[null,null]]]],"^J","^1X","^7","fipp/engine.cljc","^;",22,"^4R",["^ ","^4F",false,"^4S",2,"^4K",2,"^4C",["^Z",[["^51"],["^51","^4X"]]],"^4@",["^Z",[["^51"],["^51","^4X"]]],"^4E",["^Z",[null,null]]],"^4C",["^Z",[["^51"],["^51","^4X"]]],"^4D",null,"^4S",2,"^4E",["^Z",[null,null]],"^9",1,"^4F",false,"^4T",[["^ ","^4S",1,"^4F",false,"^4=","^4I"],["^ ","^4S",2,"^4F",false,"^4=","^4J"]],"^8",234,"^:",234,"^4K",2,"^4L",true,"^4@",["^Z",[["^51"],["^51","^4X"]]]]],"^X",["^ ","^S","^S"],"~:cljs.analyzer/constants",["^ ","^U",["^I",["~:nest","~:align","~:outdent","~:group","~:else","~:offset","~:default","~:terminate","~:too-far","~:width","^L","~:node","~:begin","~:break","~:nodes","^8","~:right","~:escaped","~:position","~:pass","~:end","~:hierarchy","~:inline","~:text","~:span"]],"~:order",["^5F","^59","^L","^5H","^57","^5=","^5D","^5B","^5I","^8","^5G","^5:","^5?","^56","^5>","^5E","^53","^58","^55","^54","^5A","^5<","^5C","^5@","^5;"]],"^11",["^ ","^V",["^I",[]]],"^12",["^ "],"^13",["^T","^S","^P","^Q"]],"^M","^K","~:ns-specs",["^ "],"~:ns-spec-vars",["^I",[]],"~:compiler-options",["^2A",[["^5M","~:static-fns"],true,["^5M","~:shadow-tweaks"],null,["^5M","~:source-map-inline"],null,["^5M","~:elide-asserts"],false,["^5M","~:optimize-constants"],null,["^5M","^18"],null,["^5M","~:external-config"],null,["^5M","~:tooling-config"],null,["^5M","~:emit-constants"],null,["^5M","~:load-tests"],null,["^5M","~:form-size-threshold"],null,["^5M","~:infer-externs"],true,["^5M","^1:"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^5M","~:fn-invoke-direct"],null,["^5M","~:source-map"],"/dev/null"]]]